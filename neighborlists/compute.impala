fn accelerator_compute_particle_forces(
    grid: Grid,
    squared_cutoff_distance: real_t,
    @potential: fn(real_t) -> real_t) -> (i64, i64) {

    let mut total_iters = 0 as i64;
    let mut rsq_iters = 0 as i64;

    loop_accelerator(grid, |i, neighborlists, nb_list_size, nb_list_offset| {
        let mut force = Vector3D {
            x: 0.0 as real_t,
            y: 0.0 as real_t,
            z: 0.0 as real_t
        };

        let pos = get_position(i, grid);

        for n in range(0, nb_list_size) {
            let neighbor_index = neighborlists(nb_list_offset + n);
            let pos_neighbor = get_position(neighbor_index, grid);
            let del = vector_sub(pos, pos_neighbor);
            let rsq = vector_len2(del);

            if rsq < squared_cutoff_distance {
                let sr2 = 1.0 / rsq;
                let sr6 = sr2 * sr2 * sr2;
                let f = 48.0 * sr6 * (sr6 - 0.5) * sr2;

                force = vector_add(force, vector_scale(f, del));
                @@add_iterator(&mut rsq_iters);
            }

            @@add_iterator(&mut total_iters);
        }

        set_force(i, grid, force);
    });

    (total_iters, rsq_iters)
}

fn accelerator_restrict_to_boundary(grid: Grid, aabb: AABB) -> () {
    loop_accelerator(grid, |i, neighborlists, nb_list_size, nb_list_offset| {
        let mut position = get_position(i, grid);

        if position.x < aabb.xmin {
            position.x = aabb.xmin + EPSILON;
        } else if position.x > aabb.xmax {
            position.x = aabb.xmax - EPSILON;
        }

        if position.y < aabb.ymin {
            position.y = aabb.ymin + EPSILON;
        } else if position.y > aabb.ymax {
            position.y = aabb.ymax - EPSILON;
        }

        if position.z < aabb.zmin {
            position.z = aabb.zmin + EPSILON;
        } else if position.z > aabb.zmax {
            position.z = aabb.zmax - EPSILON;
        }

        set_position(i, grid, position);
    });
}

fn accelerator_integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;

    loop_accelerator(grid, |i, neighborlists, nb_list_size, nb_list_offset| {
        let masses = get_masses(grid);
        let inverse_mass = 1.0 as real_t / masses(i);
        let mut position = get_position(i, grid);
        let mut velocity = get_velocity(i, grid);
        let force = get_force(i, grid);

        velocity.x += dt * force.x * inverse_mass;
        velocity.y += dt * force.y * inverse_mass;
        velocity.z += dt * force.z * inverse_mass;

        position.x += dt * velocity.x;
        position.y += dt * velocity.y;
        position.z += dt * velocity.z;

        set_velocity(i, grid, velocity);
        set_position(i, grid, position);

        @@add_iterator(&mut iters);
    });

    iters
}
