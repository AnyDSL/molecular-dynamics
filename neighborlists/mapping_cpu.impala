fn @is_nvvm() -> bool { false }
fn @is_cuda() -> bool { false }
fn @is_opencl() -> bool { false }
fn @is_amdgpu() -> bool { false }
fn @has_ldg() -> bool { false }

/*
extern "C" {
    fn rv_align(&[i8], i32) -> &[i8];
    fn rv_shuffle(real_t, i32) -> real_t;
}

fn @shuffle(x: real_t, srcLane: i32, laneOffset: i32) -> real_t {
    rv_shuffle(x, laneOffset)
}

fn @align(ptr: &[i8], alignment: i32) -> &[i8] {
    rv_align(ptr, alignment)
}
*/

fn @shuffle(x: real_t, src_lane: i32, laneOffset: i32) -> real_t {
    rv_shuffle(x as f32, laneOffset) as real_t
}

fn @align(ptr: &[i8], alignment: i32) -> &[i8] {
    rv_align(ptr as &i8, alignment) as &[i8]
}

fn add_iterator(iterator: &mut i64) -> () {
    (*iterator)++;
}

fn @accelerator_allocate(size: i32) -> Buffer {
    Buffer {
        device: 0,
        data: 0 as &[i8],
        size: 0 as i64
    }
}

fn @accelerator_allocate_3d_arrays(N: i32) -> Array3D {
    null_3d_array()
}

fn @transfer_between_devices(source: Buffer, destination: Buffer) -> () {}
fn @transfer_3d_arrays_between_devices(source: Array3D, destination: Array3D) -> () {}

fn loop_accelerator(grid: Grid, body: fn(i32, &mut[i32], i32, i32) -> ()) -> () {
    let cell_sizes = get_array_of_i32(grid.cell_sizes_cpu);
    let neighbors_sizes = get_array_of_i32(grid.neighbors_sizes_cpu);
    let neighborlists = get_array_of_i32(grid.neighborlists_cpu);
    let neighborlist_capacity = grid.neighborlist_capacity;

    outer_loop_cpu(0, grid.nparticles, |particle_index| {
        let nb_list_offset = neighborlist_capacity * particle_index;
        let nb_list_size = neighbors_sizes(particle_index);

        @@body(particle_index, neighborlists, nb_list_size, nb_list_offset);
    });
}

fn @get_cell_particles(grid: Grid) -> &mut[i32] {
    get_array_of_i32(grid.cell_particles_cpu)
}

fn @get_cell_sizes(grid: Grid) -> &mut[i32] {
    get_array_of_i32(grid.cell_sizes_cpu)
}

fn @get_particles_cell(grid: Grid) -> &mut[i32] {
    get_array_of_i32(grid.particles_cell_cpu)
}

fn @get_neighborlist_index(particle_index: i32, neighbor_index: i32, grid: Grid) -> i32 {
    grid.neighborlist_capacity * particle_index + neighbor_index
}

fn @get_neighbors_sizes(grid: Grid) -> &mut[i32] {
    get_array_of_i32(grid.neighbors_sizes_cpu)
}

fn @get_number_of_neighbors(cluster_index: i32, grid: Grid) -> i32 {
    get_i32(cluster_index, grid.neighbors_sizes_cpu)
}

fn @get_neighborlists(grid: Grid) -> &mut[i32] {
    get_array_of_i32(grid.neighborlists_cpu)
}

fn @get_masses(grid: Grid) -> &mut[real_t] {
    get_array_of_reals(grid.masses_cpu)
}

fn @get_position(i: i32, grid: Grid) -> Vector3D {
    get_vector_from_3d_arrays(i, grid.positions_cpu)
}

fn @set_position(i: i32, grid: Grid, position: Vector3D) -> () {
    set_3d_arrays(i, grid.positions_cpu, position)
}

fn @get_velocity(i: i32, grid: Grid) -> Vector3D {
    get_vector_from_3d_arrays(i, grid.velocities_cpu)
}

fn @set_velocity(i: i32, grid: Grid, velocity: Vector3D) -> () {
    set_3d_arrays(i, grid.velocities_cpu, velocity)
}

fn @get_force(i: i32, grid: Grid) -> Vector3D {
    get_vector_from_3d_arrays(i, grid.forces_cpu)
}

fn @set_force(i: i32, grid: Grid, force: Vector3D) -> () {
    set_3d_arrays(i, grid.forces_cpu, force)
}

fn @reset_force(i: i32, grid: Grid) -> () {
    set_3d_arrays(i, grid.forces_cpu, Vector3D {x: 0.0 as real_t, y: 0.0 as real_t, z: 0.0 as real_t});
}

fn @add_to_force(i: i32, grid: Grid, dF_x: real_t, dF_y: real_t, dF_z: real_t) -> () {
    let mut force = get_vector_from_3d_arrays(i, grid.forces_cpu);

    force.x += dF_x;
    force.y += dF_y;
    force.z += dF_z;

    set_3d_arrays(i, grid.forces_cpu, force);
}

fn @get_comm_send_offsets(index: i32, comm_offsets: CommOffsets) -> i32 {
    get_i32(index, comm_offsets.send_offsets)
}

fn @get_comm_recv_offsets(index: i32, comm_offsets: CommOffsets) -> i32 {
    get_i32(index, comm_offsets.recv_offsets)
}

fn gather_loop(comm_offsets: CommOffsets, body: fn(i32, Buffer, i32, i32, fn(i32, Buffer, real_t) -> ()) -> ()) -> () {
    let buffer = comm_offsets.send_buffer;
    let noffsets = comm_offsets.send_noffsets;

    outer_loop_cpu(0, noffsets, |i| {
        let offset = get_comm_send_offsets(i, comm_offsets);
        let start = i * 3;

        @@body(i, buffer, start, offset, set_real);
    });
}

fn scatter_loop(comm_offsets: CommOffsets, body: fn(i32, Buffer, i32, i32, fn(i32, Buffer) -> real_t) -> ()) -> () {
    let buffer = comm_offsets.recv_buffer;
    let noffsets = comm_offsets.recv_noffsets;

    outer_loop_cpu(0, noffsets, |i| {
        let offset = get_comm_recv_offsets(i, comm_offsets);
        let start = i * 3;

        @@body(i, buffer, start, offset, get_real);
    });
}
