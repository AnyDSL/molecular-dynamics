static mut grid_ : Grid;
static mut accelerator_grid_ : AcceleratorGrid;

extern 
fn md_set_thread_count(thread_count: i32) -> () {
    set_thread_count(thread_count);
}

extern 
fn md_initialize_grid(masses: &[real_t], positions: &[Vector], velocities: &[Vector], 
                       nparticles: i32, min: &[real_t], max: &[real_t], cell_spacing: real_t, cell_capacity: i32) -> () {
    let aabb = AABB {
        min: [min(0), min(1), min(2)],
        max: [max(0), max(1), max(2)],
    };
    let cluster_size = get_cluster_size();
    grid_ = allocate_grid(aabb, cell_spacing, cell_capacity, cluster_size, alloc_cpu);
    initialize_grid(masses, positions, velocities, nparticles, &mut grid_, alloc_cpu);
    let capacity = nparticles / 4 + 128;
    accelerator_grid_ = allocate_accelerator_grid(grid_.nx, grid_.ny, capacity, cluster_size, capacity * 64); 
}


extern fn md_copy_data_to_accelerator() -> () {
    copy_to_accelerator(grid_, &mut accelerator_grid_);
}
extern fn md_copy_data_from_accelerator() -> () {
    copy_from_accelerator(accelerator_grid_, grid_);
}

extern
fn md_deallocate_grid() -> () {
    deallocate_grid(grid_);
    deallocate_accelerator_grid(accelerator_grid_);
}

extern 
fn md_integrate_position(dt: real_t) -> () {
    accelerator_integrate_position(accelerator_grid_, dt, grid_.aabb);
    //integrate_position(grid_, dt, outer_loop_cpu, inner_loop_cpu);
}


extern 
fn md_integrate_velocity(dt: real_t) -> () {
    accelerator_integrate_velocity(accelerator_grid_, dt);
    //integrate_velocity(grid_, dt, outer_loop_cpu, inner_loop_cpu);
}

extern
fn md_write_grid_data_to_arrays(masses: &mut[real_t], positions: &mut [Vector], velocities: &mut [Vector], size: i32) -> i32 {
    write_grid_data_to_arrays(masses, positions, velocities, size, &grid_)
}

extern
fn md_redistribute_particles() -> () {
    redistribute_particles(grid_, alloc_cpu);
}

extern 
fn md_initialize_clusters(neighbor_list_capacity: i32) -> () {
   grid_initialize_clusters(grid_, neighbor_list_capacity, alloc_cpu, outer_loop_cpu, inner_loop_cpu);  
}

extern
fn md_assemble_neighbor_lists(cutoff_distance: real_t) -> () {
    grid_assemble_neighbor_lists(&grid_, cutoff_distance, alloc_cpu, outer_loop_cpu, inner_loop_cpu);
}

extern
fn md_reset_forces() -> () {
    accelerator_set_forces_to_zero(accelerator_grid_);
}

extern
fn md_compute_forces(cutoff_distance: real_t, epsilon: real_t, sigma: real_t) -> () {
    let potential = create_potential(sigma, epsilon);
    accelerator_compute_forces(accelerator_grid_, cutoff_distance*cutoff_distance, potential);
    //grid_compute_forces(grid_, cutoff_distance*cutoff_distance, potential, outer_loop_cpu, inner_loop_cpu);
}

extern
fn md_compute_total_kinetic_energy() -> real_t {
   compute_total_kinetic_energy(grid_, outer_loop_cpu, inner_loop_cpu)
}

extern
fn md_print_grid() -> () {
    print_grid(grid_);
}
