fn atomic_op_f64(a: &mut f64, b: f64, op: fn(f64, f64) -> f64) -> f64 {
    let addr_as_ui  = bitcast[&mut u64](a);
    let mut assumed = *addr_as_ui;
    let mut old = cmpxchg(addr_as_ui, assumed, bitcast[u64](op(b, bitcast[f64](assumed))))(0);
 
    while (old != assumed) {
        assumed = old;
        old = cmpxchg(addr_as_ui, assumed, bitcast[u64](op(b, bitcast[f64](assumed))))(0);
    } 
    bitcast[f64](old)
}

fn atomic_add_to_vector(i: i32, buf: Buffer, x: real_t, y: real_t, z: real_t) -> () {
    let mut vector = bitcast[&mut[Vector]](buf.data)(i);
    atomic_op_f64(&mut vector.x, x, |a,b|{a+b}); 
    atomic_op_f64(&mut vector.y, y, |a,b|{a+b}); 
    atomic_op_f64(&mut vector.z, z, |a,b|{a+b}); 
}

fn atomic_sub_from_vector(i: i32, buf: Buffer, x: real_t, y: real_t, z: real_t) -> () {
    let mut vector = bitcast[&mut[Vector]](buf.data)(i);
    atomic_op_f64(&mut vector.x, x, |a,b|{a-b}); 
    atomic_op_f64(&mut vector.y, y, |a,b|{a-b}); 
    atomic_op_f64(&mut vector.z, z, |a,b|{a-b}); 
}
