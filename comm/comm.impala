// Communication offsets (for gather and scatter kernels)
struct CommOffsets {
    // Rank of current process
    me: i32,

    // Host send data
    send_buffer: Buffer,
    send_neighbors: Buffer,
    send_rank_offsets: Buffer,
    send_rank_lengths: Buffer,
    send_offsets: Buffer,
    send_pbc: Buffer,
    copy_list: Buffer,
    send_capacity: i32,
    send_noffsets: i32,

    // Host receive data
    recv_buffer: Buffer,
    recv_neighbors: Buffer,
    recv_rank_offsets: Buffer,
    recv_rank_lengths: Buffer,
    recv_offsets: Buffer,
    recv_capacity: i32,
    recv_noffsets: i32,

    // Host counter buffer
    counter_buffer: Buffer,

    // Accelerator send data
    send_buffer_accelerator: Buffer,
    send_offsets_accelerator: Buffer,
    send_pbc_accelerator: Buffer,
    copy_list_accelerator: Buffer,

    // Accelerator receive data
    recv_buffer_accelerator: Buffer,
    recv_offsets_accelerator: Buffer,

    // Host counter buffer
    counter_buffer_accelerator: Buffer,

    // Maximun and current number of neighbors
    max_neighs: i32,
    neighs: i32
};

// Cartesian info
static mut xprev: i32;
static mut xnext: i32;
static mut yprev: i32;
static mut ynext: i32;
static mut zprev: i32;
static mut znext: i32;

// C functions to call walberla procedures
extern "C" {
    fn get_number_of_neighbor_ranks() -> u32;
    fn get_neighborhood_rank(i32) -> i32;
    fn in_rank_border(i32, f64, f64, f64, f64) -> bool;
    fn in_rank_subdomain(i32, f64, f64, f64) -> bool;
}

// Does the PBC changes in particle positions must be performed before checking
// their border condition?
fn @apply_pbc_before_border_check() -> bool { select(use_walberla(), true, false) }

// Maximum number of neighbor ranks
fn @get_initial_maximum_neighbor_ranks() -> i32 { select(use_walberla(), 30, 6) }

// Types for condition and communication functions
type CondFunc = fn(Vector3D) -> bool;
type CommFunc = fn(i32, i32, i32, i32, i32, CondFunc, CondFunc) -> ();

// Communication pattern using walberla or 6-stencil neighbors
fn communication_ranks(grid: Grid, body: CommFunc) -> () {
    let spacing = grid.spacing;

    if use_walberla() {
        let nranks = get_number_of_neighbor_ranks();

        range(0, nranks as i32, |i| {
            let rank = get_neighborhood_rank(i);

            body(rank, rank, 0, 0, 0,
                |p| { in_rank_border(rank, p.x, p.y, p.z, spacing) },
                |p| { in_rank_subdomain(rank, p.x, p.y, p.z) });
        });
    } else {
        body(xnext, xprev, -1, 0, 0,
             @|p| { p.x > grid.aabb.xmax - spacing * 2.0 },
             @|p| { p.x > grid.aabb.xmax - spacing });

        body(xprev, xnext, 1, 0, 0,
             @|p| { p.x < grid.aabb.xmin + spacing * 2.0 },
             @|p| { p.x < grid.aabb.xmin + spacing });

        body(ynext, yprev, 0, -1, 0,
             @|p| { p.y > grid.aabb.ymax - spacing * 2.0 },
             @|p| { p.y > grid.aabb.ymax - spacing });

        body(yprev, ynext, 0, 1, 0,
             @|p| { p.y < grid.aabb.ymin + spacing * 2.0 },
             @|p| { p.y < grid.aabb.ymin + spacing });

        body(znext, zprev, 0, 0, -1,
             @|p| { p.z > grid.aabb.zmax - spacing * 2.0 },
             @|p| { p.z > grid.aabb.zmax - spacing });

        body(zprev, znext, 0, 0, 1,
             @|p| { p.z < grid.aabb.zmin + spacing * 2.0 },
             @|p| { p.z < grid.aabb.zmin + spacing });
    }
}

// Get PBC conditions according to particle position
fn @get_pbc_flags_from_position(position: Vector3D, @pbc_x: i32, @pbc_y: i32, @pbc_z: i32, grid: Grid) -> PBCFlags {
    let mut pbc_flags = PBCFlags { x: 0 as i8, y: 0 as i8, z: 0 as i8 };
    let all = pbc_x == 0 && pbc_y == 0 && pbc_z == 0;

    if (all || pbc_x > 0) && position.x < grid.world_aabb.xmin + grid.spacing { pbc_flags.x =  1 as i8; };
    if (all || pbc_x < 0) && position.x > grid.world_aabb.xmax - grid.spacing { pbc_flags.x = -1 as i8; };
    if (all || pbc_y > 0) && position.y < grid.world_aabb.ymin + grid.spacing { pbc_flags.y =  1 as i8; };
    if (all || pbc_y < 0) && position.y > grid.world_aabb.ymax - grid.spacing { pbc_flags.y = -1 as i8; };
    if (all || pbc_z > 0) && position.z < grid.world_aabb.zmin + grid.spacing { pbc_flags.z =  1 as i8; };
    if (all || pbc_z < 0) && position.z > grid.world_aabb.zmax - grid.spacing { pbc_flags.z = -1 as i8; };

    pbc_flags
}

// Generate position variants according to PBC checking
fn @pbc_positions(position: Vector3D, @pbc_x: i32, @pbc_y: i32, @pbc_z: i32, grid: Grid, body: fn(Vector3D, PBCFlags) -> ()) -> () {
    if apply_pbc_before_border_check() {
        let pbc = get_pbc_flags_from_position(position, pbc_x, pbc_y, pbc_z, grid);
        let nx = select(pbc.x != 0 as i8, 2, 1);
        let ny = select(pbc.y != 0 as i8, 2, 1);
        let nz = select(pbc.z != 0 as i8, 2, 1);

        range(0, nx, |x| {
            range(0, ny, |y| {
                range(0, nz, |z| {
                    let adjusted_pos = Vector3D {
                        x: position.x + grid.xlength * pbc.x as real_t * x as real_t,
                        y: position.y + grid.ylength * pbc.y as real_t * y as real_t,
                        z: position.z + grid.zlength * pbc.z as real_t * z as real_t
                    };

                    let pbc_flags = PBCFlags {
                        x: pbc.x * x as i8,
                        y: pbc.y * y as i8,
                        z: pbc.z * z as i8
                    };

                    body(adjusted_pos, pbc_flags);
                });
            });
        });
    } else {
        body(position, PBCFlags { x: 0 as i8, y: 0 as i8, z: 0 as i8 });
    }
}

// Get world size
fn get_world_size() -> i32 {
    let mpih = mpi();
    let mut world_size: i32;

    mpih.comm_size(mpih.comms.world, &mut world_size);
    world_size
}

// Get process rank
fn get_process_rank() -> i32 {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);
    rank
}

// MPI barrier
fn barrier() -> () {
    let mpih = mpi();
    let mut request: MPI_Request;

    mpih.barrier(mpih.comms.world, &mut request);
}

// Print string with rank
fn print_string_with_rank(string: &[u8]) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(string);
    print_string("\n");
    print_flush();
}

// Print i32 value with rank
fn print_i32_with_rank(field: &[u8], value: i32) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(field);
    print_string(": ");
    print_i32(value);
    print_string("\n");
    print_flush();
}

// Print real value with rank
fn print_real_with_rank(field: &[u8], value: real_t) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(field);
    print_string(": ");
    print_f64(value);
    print_string("\n");
    print_flush();
}

// Print real buffer with rank
fn print_real_buffer_with_rank(field: &[u8], buffer: Buffer, offset: i32, length: i32) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(field);
    print_string(": ");

    range(0, length, |i| {
        print_f64(get_real(i + offset, buffer));
        print_string(", ");
    });

    print_string("\n");
}

// Print i32 buffer with rank
fn print_i32_buffer_with_rank(field: &[u8], buffer: Buffer, offset: i32, length: i32) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(field);
    print_string(": ");

    range(0, length, |i| {
        print_i32(get_i32(i + offset, buffer));
        print_string(", ");
    });

    print_string("\n");
}

// Print [i32 * 3] value with rank
fn print_i32_vector_with_rank(field: &[u8], value: [i32 * 3]) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(field);
    print_string(": ");
    print_i32(value(0));
    print_string(", ");
    print_i32(value(1));
    print_string(", ");
    print_i32(value(2));
    print_string("\n");
    print_flush();
}

// Print Vector3D value with rank
fn print_real_vector_with_rank(field: &[u8], value: Vector3D) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(field);
    print_string(": ");
    print_f64(value.x);
    print_string(", ");
    print_f64(value.y);
    print_string(", ");
    print_f64(value.z);
    print_string("\n");
    print_flush();
}

// Print PBCFlags value with rank
fn print_pbc_flags_with_rank(field: &[u8], value: PBCFlags) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(field);
    print_string(": ");
    print_i32(value.x as i32);
    print_string(", ");
    print_i32(value.y as i32);
    print_string(", ");
    print_i32(value.z as i32);
    print_string("\n");
    print_flush();
}

// Print AABB with rank
fn print_aabb_with_rank(field: &[u8], value: AABB) -> () {
    let mpih = mpi();
    let mut rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut rank);

    print_i32(rank);
    print_string("> ");
    print_string(field);
    print_string(": xrange = <");
    print_f64(value.xmin);
    print_string(", ");
    print_f64(value.xmax);
    print_string("> yrange = <");
    print_f64(value.ymin);
    print_string(", ");
    print_f64(value.ymax);
    print_string("> zrange = <");
    print_f64(value.zmin);
    print_string(", ");
    print_f64(value.zmax);
    print_string(">\n");
    print_flush();
}

// Initialize MPI
fn mpi_initialize() -> () {
    mpi().init();
}

// Finalize MPI and free data structures for communication
fn mpi_finalize() -> () {
    release_comm_offsets(comm_offsets_);
    mpi().finalize();
}

// Release communication buffers
fn release_comm_offsets(comm_offsets: CommOffsets) -> () {
    if !use_unified_memory() {
        release(comm_offsets.send_buffer);
        release(comm_offsets.send_offsets);
        release(comm_offsets.send_pbc);
        release(comm_offsets.recv_buffer);
        release(comm_offsets.recv_offsets);
        release(comm_offsets.copy_list);
    }

    if comm_offsets.send_capacity > 0 {
        release(comm_offsets.send_neighbors);
        release(comm_offsets.send_rank_offsets);
        release(comm_offsets.send_rank_lengths);
        release(comm_offsets.send_buffer_accelerator);
        release(comm_offsets.send_offsets_accelerator);
        release(comm_offsets.send_pbc_accelerator);
        release(comm_offsets.copy_list_accelerator);
    }

    if comm_offsets.recv_capacity > 0 {
        release(comm_offsets.recv_neighbors);
        release(comm_offsets.recv_rank_offsets);
        release(comm_offsets.recv_rank_lengths);
        release(comm_offsets.recv_buffer_accelerator);
        release(comm_offsets.recv_offsets_accelerator);
    }

    release(comm_offsets.counter_buffer);
    release(comm_offsets.counter_buffer_accelerator);
}

fn resize_max_neighbors_capacity(comm_offsets: &mut CommOffsets, max_neighs: i32) -> () {
    print_i32_with_rank("resize_max_neighbors_capacity()", max_neighs);

    reallocate_buffer(&mut comm_offsets.send_neighbors, max_neighs, sizeof[i32](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.send_rank_offsets, max_neighs, sizeof[i32](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.send_rank_lengths, max_neighs, sizeof[i32](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.recv_neighbors, max_neighs, sizeof[i32](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.recv_rank_offsets, max_neighs, sizeof[i32](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.recv_rank_lengths, max_neighs, sizeof[i32](), true, cpu_allocate);

    comm_offsets.max_neighs = max_neighs;
}

fn resize_send_capacity(comm_offsets: &mut CommOffsets, send_capacity: i32) -> () {
    print_i32_with_rank("resize_send_capacity()", send_capacity);

    reallocate_buffer(&mut comm_offsets.send_buffer, send_capacity * 7, sizeof[real_t](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.send_offsets, send_capacity, sizeof[i32](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.send_pbc, send_capacity * 3, sizeof[i8](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.copy_list, send_capacity, sizeof[i32](), true, cpu_allocate);

    release(comm_offsets.send_buffer_accelerator);
    release(comm_offsets.send_offsets_accelerator);
    release(comm_offsets.send_pbc_accelerator);
    release(comm_offsets.copy_list_accelerator);

    comm_offsets.send_buffer_accelerator = accelerator_allocate(send_capacity * 3 * sizeof[real_t]());
    comm_offsets.send_offsets_accelerator = accelerator_allocate(send_capacity * sizeof[i32]());
    comm_offsets.send_pbc_accelerator = accelerator_allocate(send_capacity * 3 * sizeof[i8]());
    comm_offsets.copy_list_accelerator = accelerator_allocate(send_capacity * sizeof[i32]());
    comm_offsets.send_capacity = send_capacity;

    assign_accelerator_buffer(&mut comm_offsets.send_buffer, comm_offsets.send_buffer_accelerator);
    assign_accelerator_buffer(&mut comm_offsets.send_offsets, comm_offsets.send_offsets_accelerator);
    assign_accelerator_buffer(&mut comm_offsets.send_pbc, comm_offsets.send_pbc_accelerator);
    assign_accelerator_buffer(&mut comm_offsets.copy_list, comm_offsets.copy_list_accelerator);
}

fn resize_recv_capacity(comm_offsets: &mut CommOffsets, recv_capacity: i32) -> () {
    print_i32_with_rank("resize_recv_capacity()", recv_capacity);

    reallocate_buffer(&mut comm_offsets.recv_buffer, recv_capacity * 7, sizeof[real_t](), true, cpu_allocate);
    reallocate_buffer(&mut comm_offsets.recv_offsets, recv_capacity, sizeof[i32](), true, cpu_allocate);

    release(comm_offsets.recv_buffer_accelerator);
    release(comm_offsets.recv_offsets_accelerator);

    comm_offsets.recv_buffer_accelerator = accelerator_allocate(recv_capacity * 3 * sizeof[real_t]());
    comm_offsets.recv_offsets_accelerator = accelerator_allocate(recv_capacity * sizeof[i32]());
    comm_offsets.recv_capacity = recv_capacity;

    assign_accelerator_buffer(&mut comm_offsets.recv_buffer, comm_offsets.recv_buffer_accelerator);
    assign_accelerator_buffer(&mut comm_offsets.recv_offsets, comm_offsets.recv_offsets_accelerator);
}

// Get configuration for nodes according to world size and number of
// cells in each dimension
fn get_node_config(xlength: real_t, ylength: real_t, zlength: real_t, destx: &mut i32, desty: &mut i32, destz: &mut i32) -> () {
    let mpih = mpi();
    let areax = xlength * ylength;
    let areay = xlength * zlength;
    let areaz = ylength * zlength;
    let mut bestsurf = 2.0 * (areax + areay + areaz) as f64;
    let mut world_size: i32;

    *destx = 1;
    *desty = 1;
    *destz = 1;

    mpih.comm_size(mpih.comms.world, &mut world_size);

    for i in range(1, world_size) {
        if world_size % i == 0 {
            let rem_yz = world_size / i;

            for j in range(1, rem_yz) {
                if rem_yz % j == 0 {
                    let k = rem_yz / j;
                    let surf = areax / i as f64 / j as f64 + areay / i as f64 / k as f64 + areaz / j as f64 / k as f64;

                    if surf < bestsurf {
                        *destx = i;
                        *desty = j;
                        *destz = k;
                        bestsurf = surf;
                    }
                }
            }
        }
    }
}

// Get bounding box for current node
fn @get_node_bounding_box(aabb: AABB) -> AABB {
    let mpih = mpi();
    let mut gx: i32;
    let mut gy: i32;
    let mut gz: i32;

    // Number of cells in each dimension
    let xtotallength = aabb.xmax - aabb.xmin;
    let ytotallength = aabb.ymax - aabb.ymin;
    let ztotallength = aabb.zmax - aabb.zmin;

    // Get configuration of nodes
    get_node_config(xtotallength, ytotallength, ztotallength, &mut gx, &mut gy, &mut gz);

    // Dimensions length for each rank
    let xlength = xtotallength / (gx as real_t);
    let ylength = ytotallength / (gy as real_t);
    let zlength = ztotallength / (gz as real_t);

    let mut locx: i32;
    let mut locy: i32;
    let mut locz: i32;

    // 3D cartesian position of current rank
    mpih.cart(gx, gy, gz, &mut locx, &mut locy, &mut locz, &mut xprev, &mut xnext, &mut yprev, &mut ynext, &mut zprev, &mut znext);

    // Calculate boundaries using lengths in each dimension
    let xmin = aabb.xmin + xlength * locx as real_t;
    let xmax = xmin + xlength;
    let ymin = aabb.ymin + ylength * locy as real_t;
    let ymax = ymin + ylength;
    let zmin = aabb.zmin + zlength * locz as real_t;
    let zmax = zmin + zlength;

    AABB {
        xmin: xmin,
        xmax: xmax,
        ymin: ymin,
        ymax: ymax,
        zmin: zmin,
        zmax: zmax
    }
}

// Initialize grid communication
fn initialize_comm_offsets(grid: &Grid, comm_offsets: &mut CommOffsets) -> () {
    let mpih = mpi();
    let max_neighs = get_initial_maximum_neighbor_ranks();
    let max_faces_dim = math.max(math.max(grid.nx * grid.ny, grid.nx * grid.nz), grid.ny * grid.nz);
    let send_capacity = max_neighs * max_faces_dim * 20;
    let recv_capacity = max_neighs * max_faces_dim * 20;

    let null_buf = Buffer {
        device: 0,
        data: 0 as &[i8],
        size: 0 as i64
    };

    let mut world_rank: i32;

    mpih.comm_rank(mpih.comms.world, &mut world_rank);

    if send_capacity > 0 && recv_capacity > 0 {
        let max_neighs = get_initial_maximum_neighbor_ranks();

        *comm_offsets = CommOffsets {
            // Rank of current process
            me: world_rank,

            // Host send data
            send_buffer: cpu_allocate(send_capacity * 7 * sizeof[real_t]()),
            send_neighbors: alloc_cpu(max_neighs * sizeof[i32]()),
            send_rank_offsets: alloc_cpu(max_neighs * sizeof[i32]()),
            send_rank_lengths: alloc_cpu(max_neighs * sizeof[i32]()),
            send_offsets: cpu_allocate(send_capacity * sizeof[i32]()),
            send_pbc: cpu_allocate(send_capacity * 3 * sizeof[i8]()),
            copy_list: cpu_allocate(send_capacity * sizeof[i32]()),
            send_capacity: send_capacity,
            send_noffsets: 0,

            // Host receive data
            recv_buffer: cpu_allocate(recv_capacity * 7 * sizeof[real_t]()),
            recv_neighbors: alloc_cpu(max_neighs * sizeof[i32]()),
            recv_rank_offsets: alloc_cpu(max_neighs * sizeof[i32]()),
            recv_rank_lengths: alloc_cpu(max_neighs * sizeof[i32]()),
            recv_offsets: cpu_allocate(recv_capacity * sizeof[i32]()),
            recv_capacity: recv_capacity,
            recv_noffsets: 0,

            // Host counter buffer
            counter_buffer: cpu_allocate(sizeof[i32]()),

            // Accelerator send data
            send_buffer_accelerator: accelerator_allocate(send_capacity * 7 * sizeof[real_t]()),
            send_offsets_accelerator: accelerator_allocate(send_capacity * sizeof[i32]()),
            send_pbc_accelerator: accelerator_allocate(send_capacity * 7 * sizeof[i8]()),
            copy_list_accelerator: accelerator_allocate(send_capacity * sizeof[i32]()),

            // Accelerator receive data
            recv_buffer_accelerator: accelerator_allocate(recv_capacity * 7 * sizeof[real_t]()),
            recv_offsets_accelerator: accelerator_allocate(recv_capacity * sizeof[i32]()),

            // Accelerator counter buffer
            counter_buffer_accelerator: accelerator_allocate(sizeof[i32]()),

            // Maximum and current number of neighbor ranks
            max_neighs: max_neighs,
            neighs: 0
        };

        assign_accelerator_buffer(&mut comm_offsets.send_buffer, comm_offsets.send_buffer_accelerator);
        assign_accelerator_buffer(&mut comm_offsets.send_offsets, comm_offsets.send_offsets_accelerator);
        assign_accelerator_buffer(&mut comm_offsets.send_pbc, comm_offsets.send_pbc_accelerator);
        assign_accelerator_buffer(&mut comm_offsets.recv_buffer, comm_offsets.recv_buffer_accelerator);
        assign_accelerator_buffer(&mut comm_offsets.recv_offsets, comm_offsets.recv_offsets_accelerator);
    }
}

// Synchronize ghost layer cells with neighbor ranks
fn synchronize_ghost_layer(grid: Grid, comm_offsets: CommOffsets) -> () {
    let mpih = mpi();
    let mut request: MPI_Request;
    let mut status: MPIStatus;

    let send_buffer = comm_offsets.send_buffer;
    let recv_buffer = comm_offsets.recv_buffer;
    let send_neighbors = get_array_of_i32(comm_offsets.send_neighbors);
    let recv_neighbors = get_array_of_i32(comm_offsets.recv_neighbors);
    let send_rank_offsets = get_array_of_i32(comm_offsets.send_rank_offsets);
    let recv_rank_offsets = get_array_of_i32(comm_offsets.recv_rank_offsets);
    let send_rank_lengths = get_array_of_i32(comm_offsets.send_rank_lengths);
    let recv_rank_lengths = get_array_of_i32(comm_offsets.recv_rank_lengths);

    gather_data(grid, comm_offsets);

    range(0, comm_offsets.neighs, |neigh| {
        let send_offset = send_rank_offsets(neigh) * 3 * sizeof[real_t]();
        let recv_offset = recv_rank_offsets(neigh) * 3 * sizeof[real_t]();

        if send_neighbors(neigh) != comm_offsets.me && recv_neighbors(neigh) != comm_offsets.me {
            mpih.irecv(
                &recv_buffer.data(recv_offset) as MPI_MutBuf, recv_rank_lengths(neigh) * 3,
                mpih.double_t, recv_neighbors(neigh), 0, mpih.comms.world, &mut request);

            mpih.send(
                &send_buffer.data(send_offset) as MPI_Buf, send_rank_lengths(neigh) * 3,
                mpih.double_t, send_neighbors(neigh), 0, mpih.comms.world);

            mpih.wait(&request, &mut status);
        } else {
            copy_offset(send_buffer, send_offset, recv_buffer, recv_offset, recv_rank_lengths(neigh) * 3 * sizeof[real_t]());
        }
    });

    scatter_data(grid, comm_offsets);
}

// Exchange ghost layer particles with neighbor ranks (here the number of
// particles is also updated)
fn exchange_particles(grid: &mut Grid, comm_offsets: &mut CommOffsets) -> () {
    let mpih = mpi();
    let mut request: MPI_Request;
    let mut status: MPIStatus;
    let mut iexchg = 0;
    let mut neigh = 0;

    grid.nghost = 0;

    communication_ranks(*grid, |_, _, _, _, _, _, _| {
        if neigh >= comm_offsets.max_neighs {
            resize_max_neighbors_capacity(comm_offsets, neigh + 8);
        }

        let exchg_rank_send_offsets = get_array_of_i32(comm_offsets.send_rank_offsets);
        exchg_rank_send_offsets(neigh) = -1;
        neigh++;
    });

    let exchg_rank_send_offsets = get_array_of_i32(comm_offsets.send_rank_offsets);
    let exchg_rank_send_lengths = get_array_of_i32(comm_offsets.send_rank_lengths);
    let exchg_rank_recv_lengths = get_array_of_i32(comm_offsets.recv_rank_lengths);

    neigh = 0;

    // Pack particles in each direction to exchange
    communication_ranks(*grid, |exchg_rank, _, _, _, _, _, check_exchange| {
        exchg_rank_send_offsets(neigh) = iexchg;

        // Makes no sense to exchange data with myself, right?
        if exchg_rank != comm_offsets.me {
            let mut resize = 1;

            while resize > 0 {
                let const_grid = *grid;
                let const_comm_offsets = *comm_offsets;
                let const_iexchg = iexchg;
                let world_aabb = const_grid.world_aabb;

                set_counter(iexchg, const_comm_offsets);
                reset_resize(const_grid);

                loop_accelerator(const_grid, |i, _, _, _| {
                    let masses = get_masses(const_grid);
                    let resize_buf = get_resize_buffer(const_grid);
                    let send_flags = get_send_flags(const_grid);
                    let buffer = get_send_buffer(const_comm_offsets);
                    let send_offsets = get_send_offsets(const_comm_offsets);
                    let mut pos = get_position(i, const_grid);

                    let adjust_pbc = @|condition: bool, pos: &mut Vector3D| {
                        if condition {
                            if pos.x < world_aabb.xmin { pos.x += grid.xlength; }
                            if pos.x > world_aabb.xmax { pos.x -= grid.xlength; }
                            if pos.y < world_aabb.ymin { pos.y += grid.ylength; }
                            if pos.y > world_aabb.ymax { pos.y -= grid.ylength; }
                            if pos.z < world_aabb.zmin { pos.z += grid.zlength; }
                            if pos.z > world_aabb.zmax { pos.z -= grid.zlength; }
                        }
                    };

                    adjust_pbc(apply_pbc_before_border_check(), &mut pos);

                    if check_exchange(pos) {
                        let counter = add_counter(const_comm_offsets);

                        if counter >= const_comm_offsets.send_capacity {
                            if resize_buf(0) < counter {
                                resize_buf(0) = counter;
                            }
                        } else {
                            let vel = get_velocity(i, const_grid);
                            let index = counter * 7;

                            adjust_pbc(!apply_pbc_before_border_check(), &mut pos);

                            buffer(index + 0) = masses(i);
                            buffer(index + 1) = pos.x;
                            buffer(index + 2) = pos.y;
                            buffer(index + 3) = pos.z;
                            buffer(index + 4) = vel.x;
                            buffer(index + 5) = vel.y;
                            buffer(index + 6) = vel.z;

                            send_offsets(counter - const_iexchg) = i;
                            send_flags(i) = 1 as i8;
                        }
                    } else {
                        send_flags(i) = 0 as i8;
                    }
                });

                resize = get_resize(const_grid);

                if resize > 0 {
                    resize_send_capacity(comm_offsets, resize * 2);
                }
            }

            transfer_between_devices(comm_offsets.send_offsets_accelerator, comm_offsets.send_offsets);
            transfer_between_devices(grid.send_flags_accelerator, grid.send_flags_cpu);

            let counter = get_counter(*comm_offsets);
            let packed = counter - iexchg;
            let nparticles = grid.nparticles - packed;
            let send_flags_host = get_array_of_i8(grid.send_flags_cpu);
            let send_offsets_host = get_array_of_i32(comm_offsets.send_offsets);
            let copy_list_host = get_array_of_i32(comm_offsets.copy_list);
            let mut send_pos = grid.nparticles - 1;

            range(0, packed, |i| {
                if send_offsets_host(i) < nparticles {
                    while(send_flags_host(send_pos) == 1 as i8) {
                        send_pos--;
                    }

                    copy_list_host(i) = send_pos;
                    send_pos--;
                } else {
                    copy_list_host(i) = -1;
                }
            });

            transfer_between_devices(comm_offsets.copy_list, comm_offsets.copy_list_accelerator);

            let const_comm_offsets = *comm_offsets;
            let const_grid = *grid;

            copy_list_iterate(const_comm_offsets, packed, |i, copy_list, send_offsets| {
                let masses = get_masses(const_grid);

                if copy_list(i) > 0 {
                    let src = copy_list(i);
                    let dst = send_offsets(i);

                    masses(dst) = masses(src);
                    set_position(dst, const_grid, get_position(src, const_grid));
                    set_velocity(dst, const_grid, get_velocity(src, const_grid));
                }
            });

            grid.nparticles -= packed;
            iexchg = counter;
        }

        exchg_rank_send_lengths(neigh) = iexchg - exchg_rank_send_offsets(neigh);
        neigh++;
    });

    transfer_between_devices(comm_offsets.send_buffer_accelerator, comm_offsets.send_buffer);

    iexchg = 0;
    neigh = 0;

    // Exchange particles with other ranks
    communication_ranks(*grid, |send_rank, recv_rank, _, _, _, _, _| {
        if send_rank != comm_offsets.me {
            let exchg_send_offset = exchg_rank_send_offsets(neigh) * 7 * sizeof[real_t]();
            let exchg_recv_offset = iexchg * 7 * sizeof[real_t]();

            // Exchange sizes
            mpih.send(&exchg_rank_send_lengths(neigh) as MPI_Buf, 1, mpih.int_t, send_rank, 0, mpih.comms.world);
            mpih.recv(&mut exchg_rank_recv_lengths(neigh) as MPI_MutBuf, 1, mpih.int_t, recv_rank, 0, mpih.comms.world, &mut status);

            // Readjust receive capacity if it is not enough
            if iexchg + exchg_rank_recv_lengths(neigh) >= comm_offsets.recv_capacity {
                resize_recv_capacity(comm_offsets, (iexchg + exchg_rank_recv_lengths(neigh)) * 2);
            }

            // Exchange data
            mpih.irecv(
                &comm_offsets.recv_buffer.data(exchg_recv_offset) as MPI_MutBuf, exchg_rank_recv_lengths(neigh) * 7,
                mpih.double_t, recv_rank, 0, mpih.comms.world, &mut request);

            mpih.send(
                &comm_offsets.send_buffer.data(exchg_send_offset) as MPI_Buf, exchg_rank_send_lengths(neigh) * 7,
                mpih.double_t, send_rank, 0, mpih.comms.world);

            mpih.wait(&request, &mut status);

            // Adjust exchange offset data
            iexchg += exchg_rank_recv_lengths(neigh);
        }

        neigh++;
    });

    transfer_between_devices(comm_offsets.recv_buffer, comm_offsets.recv_buffer_accelerator);

    // Unpack received particles
    let exchg_start = add_local_slots(iexchg, grid);
    let const_grid = *grid;
    let const_comm_offsets = *comm_offsets;

    recv_buffer_iterate(const_comm_offsets, iexchg, |index, recv_data| {
        let buffer_index = index * 7;
        let offset = exchg_start + index;
        let masses = get_masses(const_grid);
        let position = Vector3D {
            x: recv_data(buffer_index + 1),
            y: recv_data(buffer_index + 2),
            z: recv_data(buffer_index + 3)
        };

        let velocity = Vector3D {
            x: recv_data(buffer_index + 4),
            y: recv_data(buffer_index + 5),
            z: recv_data(buffer_index + 6)
        };

        masses(offset) = recv_data(buffer_index);
        set_position(offset, const_grid, position);
        set_velocity(offset, const_grid, velocity);
    });
}

// Define particle borders to synchronize during next iterations
fn borders(grid: &mut Grid, comm_offsets: &mut CommOffsets) -> () {
    let mpih = mpi();
    let mut request: MPI_Request;
    let mut status: MPIStatus;
    let mut isend = 0;
    let mut irecv = 0;
    let mut neigh = 0;

    grid.nghost = 0;

    communication_ranks(*grid, |_, _, _, _, _, _, _| {
        if neigh >= comm_offsets.max_neighs {
            resize_max_neighbors_capacity(comm_offsets, neigh + 8);
        }

        let send_rank_offsets = get_array_of_i32(comm_offsets.send_rank_offsets);
        let recv_rank_offsets = get_array_of_i32(comm_offsets.recv_rank_offsets);

        send_rank_offsets(neigh) = -1;
        recv_rank_offsets(neigh) = -1;

        neigh++;
    });

    let send_rank_offsets = get_array_of_i32(comm_offsets.send_rank_offsets);
    let send_rank_lengths = get_array_of_i32(comm_offsets.send_rank_lengths);

    neigh = 0;

    // Pack particles in each direction to send during next iterations
    communication_ranks(*grid, |_, _, pbc_x, pbc_y, pbc_z, check_border, _| {
        let mut resize = 1;

        send_rank_offsets(neigh) = isend;

        while resize > 0 {
            let const_grid = *grid;
            let const_comm_offsets = *comm_offsets;
            let const_isend = isend;

            set_counter(isend, const_comm_offsets);
            reset_resize(const_grid);

            loop_accelerator(const_grid, |i, _, _, _| {
                let masses = get_masses(const_grid);
                let resize_buf = get_resize_buffer(const_grid);
                let send_flags = get_send_flags(const_grid);
                let buffer = get_send_buffer(const_comm_offsets);
                let send_offsets = get_send_offsets(const_comm_offsets);
                let send_pbc = get_send_pbc(const_comm_offsets);
                let particle_pos = get_position(i, const_grid);

                // Generate all PBC variants to check border conditions
                pbc_positions(particle_pos, pbc_x, pbc_y, pbc_z, const_grid, |adjusted_pos, adjusted_pbc| {
                    if check_border(adjusted_pos) {
                        let counter = add_counter(const_comm_offsets);
                        let mut pos = adjusted_pos;
                        let mut pbc = adjusted_pbc;

                        if counter >= const_comm_offsets.send_capacity {
                            if resize_buf(0) < counter {
                                resize_buf(0) = counter;
                            }
                        } else {
                            let buf_index = counter * 4;
                            let pbc_index = counter * 3;

                            // When it is not necessary to apply PBC before border check, we want to avoid calculating
                            // PBC coordinates for particles that do not need to be communicated
                            if !apply_pbc_before_border_check() {
                                pbc = get_pbc_flags_from_position(adjusted_pos, pbc_x, pbc_y, pbc_z, const_grid);
                                pos.x += const_grid.xlength * pbc.x as real_t;
                                pos.y += const_grid.ylength * pbc.y as real_t;
                                pos.z += const_grid.zlength * pbc.z as real_t;
                            }

                            send_pbc(pbc_index + 0) = pbc.x;
                            send_pbc(pbc_index + 1) = pbc.y;
                            send_pbc(pbc_index + 2) = pbc.z;

                            buffer(buf_index + 0) = masses(i);
                            buffer(buf_index + 1) = pos.x;
                            buffer(buf_index + 2) = pos.y;
                            buffer(buf_index + 3) = pos.z;

                            send_offsets(counter) = i;
                        }
                    }
                });
            });

            resize = get_resize(const_grid);

            if resize > 0 {
                resize_send_capacity(comm_offsets, resize * 2);
            }
        }

        isend = get_counter(*comm_offsets);
        send_rank_lengths(neigh) = isend - send_rank_offsets(neigh);
        neigh++;
    });

    let recv_rank_offsets = get_array_of_i32(comm_offsets.recv_rank_offsets);
    let recv_rank_lengths = get_array_of_i32(comm_offsets.recv_rank_lengths);
    let send_neighbors = get_array_of_i32(comm_offsets.send_neighbors);
    let recv_neighbors = get_array_of_i32(comm_offsets.recv_neighbors);
    let mut recv_offsets = get_array_of_i32(comm_offsets.recv_offsets);

    neigh = 0;

    transfer_between_devices(comm_offsets.send_buffer_accelerator, comm_offsets.send_buffer);

    // Synchronize borders with other ranks
    communication_ranks(*grid, |send_rank, recv_rank, _, _, _, _, _| {
        // Rank receive offset
        recv_rank_offsets(neigh) = irecv;

        // Offsets to send and receive
        let send_offset = send_rank_offsets(neigh) * 4 * sizeof[real_t]();
        let recv_offset = recv_rank_offsets(neigh) * 4 * sizeof[real_t]();

        // Send sizes
        if send_rank != comm_offsets.me {
            mpih.send(&send_rank_lengths(neigh) as MPI_Buf, 1, mpih.int_t, send_rank, 0, mpih.comms.world);
            mpih.recv(&mut recv_rank_lengths(neigh) as MPI_MutBuf, 1, mpih.int_t, recv_rank, 0, mpih.comms.world, &mut status);
        } else {
            recv_rank_lengths(neigh) = send_rank_lengths(neigh);
        }

        // Readjust receive capacity if it is not enough
        if irecv + recv_rank_lengths(neigh) >= comm_offsets.recv_capacity {
            resize_recv_capacity(comm_offsets, (irecv + recv_rank_lengths(neigh)) * 2);
            recv_offsets = get_array_of_i32(comm_offsets.recv_offsets);
        }

        // Send and receive buffers
        let send_buffer = comm_offsets.send_buffer;
        let recv_buffer = comm_offsets.recv_buffer;

        // Send and receive data
        if send_rank != comm_offsets.me {
            mpih.irecv(
                &recv_buffer.data(recv_offset) as MPI_MutBuf, recv_rank_lengths(neigh) * 4,
                mpih.double_t, recv_rank, 0, mpih.comms.world, &mut request);

            mpih.send(
                &send_buffer.data(send_offset) as MPI_Buf, send_rank_lengths(neigh) * 4,
                mpih.double_t, send_rank, 0, mpih.comms.world);

            mpih.wait(&request, &mut status);
        } else {
            copy_offset(send_buffer, send_offset, recv_buffer, recv_offset, recv_rank_lengths(neigh) * 4 * sizeof[real_t]());
        }

        // Update ranks to send and receive during synchronization
        send_neighbors(neigh) = send_rank;
        recv_neighbors(neigh) = recv_rank;

        // Adjust receive offset data
        range(irecv, irecv + recv_rank_lengths(neigh), |i| {
            recv_offsets(i) = grid.nparticles + i;
        });

        irecv += recv_rank_lengths(neigh);
        neigh++;
    });

    add_ghost_slots(irecv, grid);

    let const_grid = *grid;
    let const_comm_offsets = *comm_offsets;

    transfer_between_devices(comm_offsets.recv_buffer, comm_offsets.recv_buffer_accelerator);
    transfer_between_devices(comm_offsets.recv_offsets, comm_offsets.recv_offsets_accelerator);

    recv_buffer_iterate(const_comm_offsets, irecv, |index, recv_data| {
        let buffer_index = index * 4;
        let offset = const_grid.nparticles + index;
        let masses = get_masses(const_grid);
        let position = Vector3D {
            x: recv_data(buffer_index + 1),
            y: recv_data(buffer_index + 2),
            z: recv_data(buffer_index + 3)
        };

        masses(offset) = recv_data(buffer_index);
        set_position(offset, const_grid, position);
    });

    comm_offsets.send_noffsets = isend;
    comm_offsets.recv_noffsets = irecv;
    comm_offsets.neighs = neigh;
}

fn reduce_time(local_time: f64, global_time: &mut f64) -> () {
    let mpih = mpi();
    let mut local = local_time;
    mpih.allreduce(&mut local as MPI_MutBuf, global_time as MPI_MutBuf, 1, mpih.double_t, mpih.ops.max, mpih.comms.world);
}

fn reduce_i32_sum(local_value: i32, global_value: &mut i32) -> () {
    let mpih = mpi();
    let mut local = local_value;
    mpih.allreduce(&mut local as MPI_MutBuf, global_value as MPI_MutBuf, 1, mpih.int_t, mpih.ops.sum, mpih.comms.world);
}

fn reduce_i64_sum(local_value: i64, global_value: &mut i64) -> () {
    let mpih = mpi();
    let mut local = local_value;
    mpih.allreduce(&mut local as MPI_MutBuf, global_value as MPI_MutBuf, 1, mpih.int64_t, mpih.ops.sum, mpih.comms.world);
}
