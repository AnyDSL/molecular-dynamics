// Communication offsets
struct CommOffsets {
    // Host send data
    send_buffer: Buffer,
    send_offsets: Buffer,
    send_buffer_accelerator: Buffer,
    send_offsets_accelerator: Buffer,
    send_noffsets: i32,

    // Host receive data
    recv_buffer: Buffer,
    recv_offsets: Buffer,
    recv_buffer_accelerator: Buffer,
    recv_offsets_accelerator: Buffer,
    recv_noffsets: i32,
};


// Print Vector3D value with rank
fn print_real_vector_with_rank(field: &[u8], value: Vector3D) -> () {
    print_string(field);
    print_string(": ");
    print_f64(value.x);
    print_string(", ");
    print_f64(value.y);
    print_string(", ");
    print_f64(value.z);
    print_string("\n");
    print_flush();
}

fn get_process_rank() -> i32 { 0 }
fn barrier() -> () {}
fn mpi_initialize() -> () {}
fn mpi_finalize() -> () {}
fn initialize_comm_offsets(grid: &Grid, comm_offsets: &mut CommOffsets) -> () {}
fn synchronize_ghost_layer_cells(grid: Grid, comm_offsets: &CommOffsets) -> () {}
fn exchange_ghost_layer_particles(grid: &mut Grid, comm_offsets: &mut CommOffsets) -> () {}
fn @get_node_bounding_box(aabb: AABB) -> AABB { aabb }
fn extend_rank_domain(aabb: &mut AABB, cell_spacing: real_t) -> () {}
fn reduce_time(local_time: f64, global_time: &mut f64) -> () { *global_time = local_time; }
fn reduce_i32_sum(local_value: i32, global_value: &mut i32) -> () { *global_value = local_value; }
fn reduce_i64_sum(local_value: i64, global_value: &mut i64) -> () { *global_value = local_value; }
