fn @NeighborlistLayout() -> ArrayLayout { column_major_order_array(0) }
type dev_i32_ptr = &mut[1]i32;

struct ReductionBuffers {
    red_array: ArrayData,
    capacity: i32
}

static mut reduction_buffers_: ReductionBuffers;

fn @device() -> Device {
    let loop_1d = @|_, n, f| {
        let acc = accelerator(device_id);
        let block_size = (64, 1, 1);
        let grid_size = (round_up(n, block_size(0)), 1, 1);

        if n > 0 {
            acc.exec(grid_size, block_size, |work_item| {
                let i = work_item.bidx() * work_item.bdimx() + work_item.tidx();
                if i < n {
                    f(i);
                }
            });

            acc.sync();
        }
    };

    Device {
        cpu_target: @|| { false },
        init: |grid| {
            reduction_buffers_.capacity = 0;
            loop_1d(false, 64, |_| {});
        },
        shutdown: || {
            if reduction_buffers_.capacity > 0 {
                release_array(reduction_buffers_.red_array);
            }
        },
        alloc: |size| { accelerator(device_id).alloc(size) },
        alloc_mirror: |buf, size| { alloc_cpu(size) },
        transfer: |from, to| { copy(from, to); },
        sqrt: @|a| { nvvm_intrinsics.sqrt(a) },
        loop_1d: loop_1d,
        add_iterator: |iterator| {},
        atomic_add_i32: @|ptr, value| { nvvm_atomic_add_global(ptr as &mut[1]i32, value) }
    }
}

fn @reserve_reduction_buffers(nelements: i32, elem_size: i32) -> () {
    if reduction_buffers_.capacity < nelements * elem_size {
        let new_capacity = (nelements + 20) * elem_size;
        reallocate_array(&mut reduction_buffers_.red_array, new_capacity, 1, 1, false);
        reduction_buffers_.capacity = new_capacity;
    }
}

fn @reduce_i32(n: i32, b: i32, reduce: fn(i32, i32) -> i32, body: fn(i32) -> i32) -> i32 {
    let acc = accelerator(device_id);
    let block_size = (64, 1, 1);
    let nblocks = round_up(n, block_size(0));
    let grid_size = (nblocks, 1, 1);
    let mut red = b;

    if n > 0 {
        reserve_reduction_buffers(nblocks, sizeof[i32]());
        let blocks_red_host = bitcast[&[i32]](array_host(reduction_buffers_.red_array).data);
        let blocks_red_gpu  = bitcast[&mut[i32]](array_dev(reduction_buffers_.red_array).data);

        acc.exec(grid_size, block_size, |work_item| {
            let sh_red_data = reserve_shared[i32](block_size(0));
            let tid = work_item.tidx();
            let index = work_item.bidx() * work_item.bdimx() + work_item.tidx();

            if index < n {
                sh_red_data(tid) = body(index);
            } else {
                sh_red_data(tid) = b;
            }

            acc.barrier();

            let mut s = work_item.bdimx() >> 1;
            while s > 0 {
                if tid < s {
                    sh_red_data(tid) = reduce(sh_red_data(tid), sh_red_data(tid + s));
                }

                acc.barrier();
                s >>= 1;
            }

            if tid == 0 {
                blocks_red_gpu(work_item.bidx()) = sh_red_data(0);
            }
        });

        acc.sync();
        transfer_array_to_host(reduction_buffers_.red_array);

        range(0, nblocks, |i| {
            red = reduce(red, blocks_red_host(i));
        });
    }

    red
}

fn @reduce_aabb(n: i32, b: AABB, reduce: fn(AABB, AABB) -> AABB, body: fn(i32) -> AABB) -> AABB {
    let acc = accelerator(device_id);
    let block_size = (64, 1, 1);
    let nblocks = round_up(n, block_size(0));
    let grid_size = (nblocks, 1, 1);
    let mut red = b;

    if n > 0 {
        reserve_reduction_buffers(nblocks, sizeof[AABB]());
        let blocks_red_host = bitcast[&[AABB]](array_host(reduction_buffers_.red_array).data);
        let blocks_red_gpu  = bitcast[&mut[AABB]](array_dev(reduction_buffers_.red_array).data);

        acc.exec(grid_size, block_size, |work_item| {
            let sh_red_data = reserve_shared[AABB](block_size(0));
            let tid = work_item.tidx();
            let index = work_item.bidx() * work_item.bdimx() + work_item.tidx();

            if index < n {
                sh_red_data(tid) = body(index);
            } else {
                sh_red_data(tid) = b;
            }

            acc.barrier();

            let mut s = work_item.bdimx() >> 1;
            while s > 0 {
                if tid < s {
                    sh_red_data(tid) = reduce(sh_red_data(tid), sh_red_data(tid + s));
                }

                acc.barrier();
                s >>= 1;
            }

            if tid == 0 {
                blocks_red_gpu(work_item.bidx()) = sh_red_data(0);
            }
        });

        acc.sync();
        transfer_array_to_host(reduction_buffers_.red_array);

        range(0, nblocks, |i| {
            red = reduce(red, blocks_red_host(i));
        });
    }

    red
}
