fn @is_nvvm() -> bool { false }
fn @is_cuda() -> bool { false }
fn @is_opencl() -> bool { false }
fn @is_amdgpu() -> bool { false }
fn @has_ldg() -> bool { false }

type dev_i32_ptr = &mut i32;

fn @device() -> Device {
    Device {
        cpu_target: @|| { true },
        init: |grid| {},
        shutdown: || {},
        alloc: |size| { alloc_cpu(size) },
        alloc_mirror: |buf, size| { buf },
        transfer: |from, to| {},
        sqrt: @|a| { cpu_intrinsics.sqrt(a) },
        add_iterator: |iterator| { (*iterator)++; },
        atomic_add_i32: @|ptr, value| {
            *ptr += value;
            *ptr - value
        }
    }
}

// Vectorizes an arbitrary range
fn @vectorized_range(@vector_width: i32, a: i32, b: i32, body: fn (i32, i32) -> ()) -> () {
    if vector_width == 1 {
        for i in range(a, b) {
            body(i, 1);
        }
    } else {
        let n_vec = round_down(b - a, vector_width);
        for i in range_step(a, a + n_vec, vector_width) {
            for j in vectorize(vector_width) {
                @@body(i + j, vector_width)
            }
        }
        for i in range(a + n_vec, b) {
            @@body(i, 1)
        }
    }
}

fn @particles_gen(@vec: bool, @ghost: bool, grid: Grid, body: fn(i32, &mut[i32], i32, i32) -> ()) -> () {
    let neighbors_sizes = get_array_i32_ref(array_dev, grid.neighbors_sizes);
    let neighborlists = get_array_i32_ref(array_dev, grid.neighborlists);
    let vec_width = select(vec, get_vector_width(), 1);
    let n = select(ghost, grid.nparticles + grid.nghost, grid.nparticles);

    vectorized_range(vec_width, 0, n, |particle_index, _| {
        @@body(particle_index, neighborlists, neighbors_sizes(particle_index), grid.neighborlist_capacity * particle_index);
    });
}

fn @particles(@ghost: bool, grid: Grid, f: fn(i32, &mut[i32], i32, i32) -> ()) -> () { particles_gen(false, ghost, grid, f); }
fn @particles_vec(@ghost: bool, grid: Grid, f: fn(i32, &mut[i32], i32, i32) -> ()) -> () { particles_gen(true, ghost, grid, f); }
fn @cells(grid: Grid, body: fn(i32) -> ()) -> () { range(0, grid.ncells, body); }
fn copy_list_iterate(comm_offsets: &CommOffsets, ncopy: i32, body: fn(i32, &[i32], &[i32]) -> ()) -> () {
    range(0, ncopy, |index| {
        @@body(index, get_array_i32_ref(array_dev, comm_offsets.copy_list), get_array_i32_ref(array_dev, comm_offsets.send_offsets));
    });
}

fn comm_buffer_iterate(comm_offsets: &CommOffsets, noffsets: i32, body: fn(i32, &mut [real_t], &[real_t]) -> ()) -> () {
    range(0, noffsets, |index| {
        @@body(index, get_array_real_ref(array_dev, comm_offsets.send_buffer), get_array_real_ref(array_dev, comm_offsets.recv_buffer));
    });
}

fn @reduce_i32(n: i32, b: i32, reduce: fn(i32, i32) -> i32, body: fn(i32) -> i32) -> i32 {
    let mut red = b;

    range(0, n, |i| {
        red = reduce(red, body(i));
    });

    red
}

fn @reduce_aabb(n: i32, b: AABB, reduce: fn(AABB, AABB) -> AABB, body: fn(i32) -> AABB) -> AABB {
    let mut red = b;

    range(0, n, |i| {
        red = reduce(red, body(i));
    });

    red
}

fn @get_neighborlist_index(particle_index: i32, neighbor_index: i32, grid: Grid) -> i32 {
    grid.neighborlist_capacity * particle_index + neighbor_index
}
