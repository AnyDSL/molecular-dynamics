fn @NeighborlistLayout() -> ArrayLayout { row_major_order_array(0) }
type dev_i32_ptr = &mut i32;

fn @device() -> Device {
    Device {
        cpu_target: @|| { true },
        init: |grid| {},
        shutdown: || {},
        alloc: |size| { alloc_cpu(size) },
        alloc_mirror: |buf, size| { buf },
        transfer: |from, to| {},
        sqrt: @|a| { cpu_intrinsics.sqrt(a) },
        loop_1d: @|vec, n, f| { vectorized_range(select(vec, get_vector_width(), 1), 0, n, |i, _| { f(i); }); },
        add_iterator: |iterator| { (*iterator)++; },
        atomic_add_i32: @|ptr, value| {
            *ptr += value;
            *ptr - value
        }
    }
}

// Vectorizes an arbitrary range
fn @vectorized_range(@vector_width: i32, a: i32, b: i32, body: fn (i32, i32) -> ()) -> () {
    if vector_width == 1 {
        for i in range(a, b) {
            body(i, 1);
        }
    } else {
        let n_vec = round_down(b - a, vector_width);
        for i in range_step(a, a + n_vec, vector_width) {
            for j in vectorize(vector_width) {
                @@body(i + j, vector_width)
            }
        }
        for i in range(a + n_vec, b) {
            @@body(i, 1)
        }
    }
}

fn @reduce_i32(n: i32, b: i32, reduce: fn(i32, i32) -> i32, body: fn(i32) -> i32) -> i32 {
    let mut red = b;

    range(0, n, |i| {
        red = reduce(red, body(i));
    });

    red
}

fn @reduce_aabb(n: i32, b: AABB, reduce: fn(AABB, AABB) -> AABB, body: fn(i32) -> AABB) -> AABB {
    let mut red = b;

    range(0, n, |i| {
        red = reduce(red, body(i));
    });

    red
}
