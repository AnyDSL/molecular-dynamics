fn @(?half_nb) neighbor_cells(index: i32, nx: i32, ny: i32, ncells: i32, half_nb: i32, body: fn(i32) -> ()) -> () {
    range(-1, 2, |offset_z| {
        let flat_offset_z = offset_z * nx * ny;

        range(-1, 2, |offset_y| {
            let flat_offset_y = offset_y * nx;

            range(-1, 2, |offset_x| {
                let nb_cell_index = index + flat_offset_z + flat_offset_y + offset_x;
                if nb_cell_index >= 0 && nb_cell_index < ncells {
                    @@body(nb_cell_index);
                }
            });
        });
    });
}

fn @(?half_nb) assemble_neighborlists(grid: &mut Grid, half_nb: i32, cutoff_distance: real_t) -> () {
    let mut resize = 1;

    while resize > 0 {
        let const_grid = *grid; // const reference is necessary to avoid compilation errors
        let cell_particles = get_array_i32_ref(array_dev, const_grid.cell_particles);
        let cell_sizes = get_array_i32_ref(array_dev, const_grid.cell_sizes);
        let particles_cell = get_array_i32_ref(array_dev, const_grid.particles_cell);
        let neighbors_sizes = get_array_i32_ref(array_dev, const_grid.neighbors_sizes);

        reset_resize(const_grid);

        let append_neighbor_cell = @|particle: Particle, @chk_myself: bool, i: i32, pos: Vector3D, cell_size: i32, cell_offset: i32| {
            range(0, cell_size, |k| {
                let j = cell_particles(cell_offset + k);
                if !chk_myself || i != j {
                    if half_nb == 0 || i > j {
                        let pos_neighbor = particle.get_position(j);
                        let rsq = vector_len2(vector_sub(pos, pos_neighbor));

                        if rsq <= cutoff_distance * cutoff_distance {
                            let nb_list_size = neighbors_sizes(i);

                            if nb_list_size >= const_grid.neighborlist_capacity {
                                grow_resize(nb_list_size, const_grid);
                            } else {
                                particle.set_neigh(i, nb_list_size, j);
                            }

                            neighbors_sizes(i)++;
                        }
                    }
                }
            });
        };

        particles_vec(false, const_grid, |i, particle| {
            let pos = particle.get_position(i);
            let cell_index = particles_cell(i);

            neighbors_sizes(i) = 0;
            neighbor_cells(cell_index, const_grid.nx, const_grid.ny, const_grid.ncells, half_nb, |nbr_cell_index| {
                if cell_index != nbr_cell_index {
                    let neighbor_cell_offset = get_cell_offset(nbr_cell_index, const_grid);
                    let neighbor_cell_size = cell_sizes(nbr_cell_index);
                    append_neighbor_cell(particle, false, i, pos, neighbor_cell_size, neighbor_cell_offset);
                } else {
                    let cell_offset = get_cell_offset(cell_index, const_grid);
                    let cell_size = cell_sizes(cell_index);
                    append_neighbor_cell(particle, true, i, pos, cell_size, cell_offset);
                }
            });
        });

        resize = get_resize(const_grid);

        if resize > 0 {
            reallocate_neighborlist_capacity(grid, resize * 2);
        }
    }
}
