fn neighbor_cells(index: i32, nx: i32, ny: i32, ncells: i32, body: fn(i32) -> ()) -> () {
    range(-1, 2, |offset_z| {
        let flat_offset_z = offset_z * nx * ny;

        range(-1, 2, |offset_y| {
            let flat_offset_y = offset_y * nx;

            range(-1, 2, |offset_x| {
                let nb_cell_index = index + flat_offset_z + flat_offset_y + offset_x;

                if nb_cell_index >= 0 && nb_cell_index < ncells {
                    @@body(nb_cell_index);
                }
            });
        });
    });
}

fn append_neighbor(grid: Grid, particle_index: i32, neighbor_index: i32) -> () {
    let neighborlists = get_neighborlists(grid);
    let neighbors_sizes = get_neighbors_sizes(grid);
    let nb_list_size = neighbors_sizes(particle_index);
    let resize_buf = get_resize_buffer(grid);

    if nb_list_size >= grid.neighborlist_capacity {
        if resize_buf(0) < nb_list_size {
            resize_buf(0) = nb_list_size;
        }
    } else {
        neighborlists(get_neighborlist_index(particle_index, nb_list_size, grid)) = neighbor_index;
    }

    neighbors_sizes(particle_index)++;
}

fn assemble_neighborlists(grid: &mut Grid, cutoff_distance: real_t) -> () {
    let mut resize = 1;

    while resize > 0 {
        let const_grid = *grid; // This ugly const reference is necessary to avoid compilation errors
        let cell_list = get_cell_list(const_grid);
        let cell_particles = get_cell_particles(const_grid);
        let cell_sizes = get_cell_sizes(const_grid);
        let particles_cell = get_particles_cell(const_grid);
        let neighbors_sizes = get_neighbors_sizes(const_grid);

        let ncells = grid.ncells;
        let cell_capacity = grid.cell_capacity;
        let nx = grid.nx;
        let ny = grid.ny;
        let squared_cutoff_distance = cutoff_distance * cutoff_distance;

        reset_resize(const_grid);

        if sparse_cell_list() {
            cells(const_grid, |cell_index| {
                let cell_place = cell_list(cell_index);
                let cell_size = cell_sizes(cell_index);
                let cell_offset = get_cell_offset(cell_index, const_grid);

                range(0, cell_size, |cell_particle_index| {
                    let particle_index = cell_particles(cell_offset + cell_particle_index);
                    neighbors_sizes(particle_index) = 0;
                });

                neighbor_cells(cell_place, nx, ny, ncells, |nbr_cell_place| {
                    let nbr_cell_index = get_cell_index_from_place(const_grid, nbr_cell_place, false);

                    if cell_index != nbr_cell_index {
                        if nbr_cell_index != -1 {
                            let neighbor_cell_offset = get_cell_offset(nbr_cell_index, const_grid);
                            let neighbor_cell_size = cell_sizes(nbr_cell_index);

                            range(0, cell_size, |cell_particle_index| {
                                let particle_index = cell_particles(cell_offset + cell_particle_index);
                                let pos = get_position(particle_index, const_grid);

                                range(0, neighbor_cell_size, |neighbor_cell_particle_index| {
                                    let neighbor_particle_index = cell_particles(neighbor_cell_offset + neighbor_cell_particle_index);
                                    let pos_neighbor = get_position(neighbor_particle_index, const_grid);
                                    let del = vector_sub(pos, pos_neighbor);
                                    let rsq = vector_len2(del);

                                    if rsq <= squared_cutoff_distance {
                                        @@append_neighbor(const_grid, particle_index, neighbor_particle_index);
                                    }
                                });
                            });
                        }
                    } else {
                        range(0, cell_size, |cell_particle_index| {
                            let particle_index = cell_particles(cell_offset + cell_particle_index);
                            let pos = get_position(particle_index, const_grid);

                            range(0, cell_size, |neighbor_cell_particle_index| {
                                if cell_particle_index != neighbor_cell_particle_index {
                                    let neighbor_particle_index = cell_particles(cell_offset + neighbor_cell_particle_index);
                                    let pos_neighbor = get_position(neighbor_particle_index, const_grid);
                                    let del = vector_sub(pos, pos_neighbor);
                                    let rsq = vector_len2(del);

                                    if rsq <= squared_cutoff_distance {
                                        @@append_neighbor(const_grid, particle_index, neighbor_particle_index);
                                    }
                                }
                            });
                        });
                    }
                });
            });
        } else {
            particles(const_grid, |particle_index, _, _, _| {
                let pos = get_position(particle_index, const_grid);
                let cell_place = particles_cell(particle_index);
                let cell_index = get_cell_index_from_place(const_grid, cell_place, false);

                neighbors_sizes(particle_index) = 0;

                neighbor_cells(cell_place, nx, ny, ncells, |nbr_cell_place| {
                    let nbr_cell_index = get_cell_index_from_place(const_grid, nbr_cell_place, false);

                    if cell_index != nbr_cell_index {
                        if nbr_cell_index != -1 {
                            let neighbor_cell_offset = get_cell_offset(nbr_cell_index, const_grid);
                            let neighbor_cell_size = cell_sizes(nbr_cell_index);

                            range(0, neighbor_cell_size, |neighbor_cell_particle_index| {
                                let neighbor_particle_index = cell_particles(neighbor_cell_offset + neighbor_cell_particle_index);
                                let pos_neighbor = get_position(neighbor_particle_index, const_grid);
                                let del = vector_sub(pos, pos_neighbor);
                                let rsq = vector_len2(del);

                                if rsq <= squared_cutoff_distance {
                                    @@append_neighbor(const_grid, particle_index, neighbor_particle_index);
                                }
                            });
                        }
                    } else {
                        let cell_offset = get_cell_offset(cell_index, const_grid);
                        let cell_size = cell_sizes(cell_index);

                        range(0, cell_size, |neighbor_cell_particle_index| {
                            let neighbor_particle_index = cell_particles(cell_offset + neighbor_cell_particle_index);

                            if particle_index != neighbor_particle_index {
                                let pos_neighbor = get_position(neighbor_particle_index, const_grid);
                                let del = vector_sub(pos, pos_neighbor);
                                let rsq = vector_len2(del);

                                if rsq <= squared_cutoff_distance {
                                    @@append_neighbor(const_grid, particle_index, neighbor_particle_index);
                                }
                            }
                        });
                    }
                });
            });
        }

        resize = get_resize(const_grid);

        if resize > 0 {
            reallocate_neighborlist_capacity(grid, resize * 2);
        }
    }
}
