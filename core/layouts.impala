struct ArrayData {
    buffer: Buffer,
    buffer_host: Buffer,
    size_x: i32,
    size_y: i32,
    host_mirror: bool
};

struct ArrayLayout {
    index_2d_fn: fn(ArrayData, i32, i32) -> i32,
    add_fn: fn(ArrayData, i32, real_t) -> ()
};

fn @get_shift_size(cluster_size: i32) -> i32 {
    if cluster_size > 0 {
        1 + get_shift_size(cluster_size >> 1)
    } else {
        0
    }
}

fn @null_array() -> ArrayData {
    let null_buf = Buffer {
        device: 0,
        data: 0 as &[i8],
        size: 0 as i64
    };

    ArrayData {
        buffer: null_buf,
        buffer_host: null_buf,
        size_x: 0,
        size_y: 0,
        host_mirror: false
    }
}

fn allocate_array(size_x: i32, size_y: i32, elem_size: i64, host_mirror: bool) -> ArrayData {
    let dev = device();
    let buffer = dev.alloc(size_x as i64 * size_y as i64 * elem_size);

    ArrayData {
        buffer: buffer,
        buffer_host: dev.alloc_mirror(buffer, size_x as i64 * size_y as i64 * elem_size),
        size_x: size_x,
        size_y: size_y,
        host_mirror: host_mirror
    }
}

fn @add_fn(atomic: i32, array: ArrayData, index: i32, value: real_t) -> () {
    let data = get_array_real_ref(array_dev, array);

    if atomic != 0 {
        atomic_add_real(&mut data(index), value);
    } else {
        data(index) += value;
    }
}

fn @null_layout() -> ArrayLayout { column_major_order_array(0) }
fn @column_major_order_array(@atomic: i32) -> ArrayLayout {
    ArrayLayout {
        index_2d_fn: @|array, x, y| { y * array.size_x + x },
        add_fn: @|array, i, v| { add_fn(atomic, array, i, v); }
    }
}

fn @row_major_order_array(@atomic: i32) -> ArrayLayout {
    ArrayLayout {
        index_2d_fn: @|array, x, y| { x * array.size_y + y },
        add_fn: @|array, i, v| { add_fn(atomic, array, i, v); }
    }
}

fn @clustered_array(@atomic: i32, @cluster_size: i32) -> ArrayLayout {
    let mask = cluster_size - 1;
    let shift = get_shift_size(cluster_size) - 1;

    ArrayLayout {
        index_2d_fn: @|array, x, y| {
            let i = x >> shift;
            let j = x & mask;
            cluster_size * (i * array.size_y + y) + j
        },
        add_fn: @|array, i, v| { add_fn(atomic, array, i, v); }
    }
}

fn reallocate_array(array: &mut ArrayData, size_x: i32, size_y: i32, elem_size: i64, @preserve: bool) -> () {
    let dev = device();
    let new_buffer = dev.alloc(size_x as i64 * size_y as i64 * elem_size);
    let new_buffer_host = dev.alloc_mirror(new_buffer, size_x as i64 * size_y as i64 * elem_size);

    if preserve {
        copy(array.buffer_host, new_buffer_host);
        dev.transfer(new_buffer_host, new_buffer);
    }

    release_array(*array);

    (*array).buffer = new_buffer;
    (*array).buffer_host = new_buffer_host;
    (*array).size_x = size_x;
    (*array).size_y = size_y;
}

fn release_array(array: ArrayData) -> () {
    if !device().cpu_target() {
        release(array.buffer);
    }

    release(array.buffer_host);
}

fn @transfer_array_to_device(array: ArrayData) -> () { device().transfer(array.buffer_host, array.buffer); }
fn @transfer_array_to_host(array: ArrayData) -> () { device().transfer(array.buffer, array.buffer_host); }
fn @array_dev(array: ArrayData) -> Buffer { array.buffer }
fn @array_host(array: ArrayData) -> Buffer { array.buffer_host }
fn @get_array_i8_ref(@target_fn: ArrayTargetFn, array: ArrayData) -> &mut[i8] { bitcast[&mut[i8]](target_fn(array).data) }
fn @get_array_i32_ref(@target_fn: ArrayTargetFn, array: ArrayData) -> &mut[i32] { bitcast[&mut[i32]](target_fn(array).data) }
fn @get_array_real_ref(@target_fn: ArrayTargetFn, array: ArrayData) -> &mut[real_t] { bitcast[&mut[real_t]](target_fn(array).data) }

type ArrayTargetFn = fn(ArrayData) -> Buffer;

fn @array_2d_set_real(@target_fn: ArrayTargetFn, @layout: ArrayLayout, array: ArrayData, i: i32, j: i32, value: real_t) -> () {
    bitcast[&mut[real_t]](target_fn(array).data)(layout.index_2d_fn(array, i, j)) = value;
}

fn @array_2d_get_real(@target_fn: ArrayTargetFn, @layout: ArrayLayout, array: ArrayData, i: i32, j: i32) -> real_t {
    bitcast[&[real_t]](target_fn(array).data)(layout.index_2d_fn(array, i, j))
}

fn @array_2d_set_i32(@target_fn: ArrayTargetFn, @layout: ArrayLayout, array: ArrayData, i: i32, j: i32, value: i32) -> () {
    bitcast[&mut[i32]](target_fn(array).data)(layout.index_2d_fn(array, i, j)) = value;
}

fn @array_2d_get_i32(@target_fn: ArrayTargetFn, @layout: ArrayLayout, array: ArrayData, i: i32, j: i32) -> i32 {
    bitcast[&[i32]](target_fn(array).data)(layout.index_2d_fn(array, i, j))
}

fn @array_2d_add_real(@layout: ArrayLayout, array: ArrayData, i: i32, j: i32, value: real_t) -> () {
    layout.add_fn(array, layout.index_2d_fn(array, i, j), value);
}

fn @array_2d_set_vec3(@target_fn: ArrayTargetFn, @layout: ArrayLayout, array: ArrayData, i: i32, vector: Vector3D) -> () {
    array_2d_set_real(target_fn, layout, array, i, 0, vector.x);
    array_2d_set_real(target_fn, layout, array, i, 1, vector.y);
    array_2d_set_real(target_fn, layout, array, i, 2, vector.z);
}

fn @array_2d_get_vec3(@target_fn: ArrayTargetFn, @layout: ArrayLayout, array: ArrayData, i: i32) -> Vector3D {
    Vector3D {
        x: array_2d_get_real(target_fn, layout, array, i, 0),
        y: array_2d_get_real(target_fn, layout, array, i, 1),
        z: array_2d_get_real(target_fn, layout, array, i, 2)
    }
}

fn @array_2d_add_vec3(@layout: ArrayLayout, array: ArrayData, i: i32, vector: Vector3D) -> () {
    array_2d_add_real(layout, array, i, 0, vector.x);
    array_2d_add_real(layout, array, i, 1, vector.y);
    array_2d_add_real(layout, array, i, 2, vector.z);
}

fn @array_2d_copy_vec3(@layout: ArrayLayout, src: ArrayData, dest: ArrayData, i: i32, j: i32) -> () {
    array_2d_set_vec3(array_host, layout, dest, j, array_2d_get_vec3(array_host, layout, src, i));
}
