struct Grid {
    aabb: AABB,                 // grid bounding box
    world_aabb: AABB,           // global grid bounding box
    nx: i32,                    // number of cells in x dimension
    ny: i32,                    // number of cells in y dimension
    nz: i32,                    // number of cells in z dimension
    ncells_capacity: i32,       // capacity of cell amount in the grid
    particle_capacity: i32,     // particle capacity in grid
    cell_capacity: i32,         // cell capacity in grid
    neighborlist_capacity: i32, // capacity of the neighborlists arrays
    ncells: i32,                // number of cells in the grid
    nparticles: i32,            // number of particles in the grid
    nghost: i32,                // number of ghost particles in the grid
    cells_offset_x: i32,        // cells offset for x dimension
    cells_offset_y: i32,        // cells offset for y dimension
    cells_offset_z: i32,        // cells offset for z dimension
    xlength: real_t,            // grid length in x dimension for PBC correction
    ylength: real_t,            // grid length in y dimension for PBC correction
    zlength: real_t,            // grid length in z dimension for PBC correction
    spacing: real_t,            // cell spacing
    positions: ArrayData,       // particle positions
    velocities: ArrayData,      // particle velocities
    forces: ArrayData,          // particle forces
    positions_copy: ArrayData,  // positions copy
    velocities_copy: ArrayData, // velocities copy
    masses: ArrayData,          // particle masses
    cell_particles: ArrayData,  // particles in each cell
    cell_sizes: ArrayData,      // cell sizes
    particles_cell: ArrayData,  // cell assigned to particle
    neighbors_sizes: ArrayData, // neighborlist size for each particle
    neighborlists: ArrayData,   // neighborlists data
    send_flags: ArrayData,      // send flags for particles 
    counter: ArrayData,         // counter
    resize: ArrayData           // resize
}

fn @ParticleDataLayout() -> ArrayLayout { row_major_order_array(0) }
fn @get_position(i: i32, grid: Grid) -> Vector3D { array_2d_get_vec3(array_dev, ParticleDataLayout(), grid.positions, i) }
fn @set_position(i: i32, grid: Grid, p: Vector3D) -> () { array_2d_set_vec3(array_dev, ParticleDataLayout(), grid.positions, i, p); }
fn @get_velocity(i: i32, grid: Grid) -> Vector3D { array_2d_get_vec3(array_dev, ParticleDataLayout(), grid.velocities, i) }
fn @set_velocity(i: i32, grid: Grid, v: Vector3D) -> () { array_2d_set_vec3(array_dev, ParticleDataLayout(), grid.velocities, i, v); }
fn @get_force(i: i32, grid: Grid) -> Vector3D { array_2d_get_vec3(array_dev, ParticleDataLayout(), grid.forces, i) }
fn @set_force(i: i32, grid: Grid, f: Vector3D) -> () { array_2d_set_vec3(array_dev, ParticleDataLayout(), grid.forces, i, f); }
fn @sort_particles() -> bool { false }
fn @sparse_cell_list() -> bool { false }
fn @get_cell_offset(cell_index: i32, grid: &Grid) -> i32 { cell_index * grid.cell_capacity }
fn @get_neighborlist_offset(cell_index: i32, cluster_index: i32, grid: &Grid) -> i32 {
    grid.neighborlist_capacity * (cell_index * grid.cell_capacity + cluster_index)
}

fn @particles(@vec: bool, @ghost: bool, grid: Grid, f: fn(i32) -> ()) -> () {
    let n = select(ghost, grid.nparticles + grid.nghost, grid.nparticles);
    device().loop_1d(vec, n, |particle_index| {
        f(particle_index);
    });
}

fn @particles_scalar(@ghost: bool, grid: Grid, f: fn(i32) -> ()) -> () { particles(false, ghost, grid, f); }
fn @particles_vec(@ghost: bool, grid: Grid, f: fn(i32) -> ()) -> () { particles(true, ghost, grid, f); }
fn @neighbors(particle_index: i32, grid: Grid, f: fn(i32) -> ()) -> () {
    for n in range(0, get_array_i32_ref(array_dev, grid.neighbors_sizes)(particle_index)) {
        f(array_2d_get_i32(array_dev, NeighborlistLayout(), grid.neighborlists, particle_index, n));
    }
}

fn allocate_grid(world_aabb: AABB, aabb: AABB, cell_spacing: f64, cell_capacity: i32, neighborlist_capacity: i32) -> Grid {
    let nx = real_floor(((aabb.xmax - aabb.xmin + (cell_spacing / (2.0 as real_t))) / cell_spacing)) as i32 + 1;
    let ny = real_floor(((aabb.ymax - aabb.ymin + (cell_spacing / (2.0 as real_t))) / cell_spacing)) as i32 + 1;
    let nz = real_floor(((aabb.zmax - aabb.zmin + (cell_spacing / (2.0 as real_t))) / cell_spacing)) as i32 + 1;
    let ncells = nx * ny * nz;
    let ncells_capacity = ncells * 4;
    let particle_capacity = ncells_capacity * 8;
    let alloc_i8_array      =  @|capacity: i32, mirror_host: bool| { allocate_array(capacity, 1, sizeof[i8](),     mirror_host) };
    let alloc_i32_array     =  @|capacity: i32, mirror_host: bool| { allocate_array(capacity, 1, sizeof[i32](),    mirror_host) };
    let alloc_real_array    =  @|capacity: i32, mirror_host: bool| { allocate_array(capacity, 1, sizeof[real_t](), mirror_host) };
    let alloc_vec3_array    =  @|capacity: i32, mirror_host: bool| { allocate_array(capacity, 3, sizeof[real_t](), mirror_host) };
    let alloc_vec3_array_if =  @|condition: bool, capacity: i32, mirror_host: bool| {
        select(condition, alloc_vec3_array(capacity, mirror_host), null_array())
    };

    let null_buf = Buffer {
        device: 0,
        data: 0 as &[i8],
        size: 0 as i64
    };

    Grid {
        aabb: aabb,
        world_aabb: world_aabb,
        nx: nx,
        ny: ny,
        nz: nz,
        ncells_capacity: ncells_capacity,
        particle_capacity: particle_capacity,
        cell_capacity: cell_capacity,
        neighborlist_capacity: neighborlist_capacity,
        ncells: ncells,
        nparticles: 0,
        nghost: 0,
        cells_offset_x: 0,
        cells_offset_y: 0,
        cells_offset_z: 0,
        xlength: world_aabb.xmax - world_aabb.xmin,
        ylength: world_aabb.ymax - world_aabb.ymin,
        zlength: world_aabb.zmax - world_aabb.zmin,
        spacing: cell_spacing,
        positions: alloc_vec3_array(particle_capacity, true),
        velocities: alloc_vec3_array(particle_capacity, true),
        forces: alloc_vec3_array(particle_capacity, true),
        positions_copy: alloc_vec3_array_if(sort_particles(), particle_capacity, false),
        velocities_copy: alloc_vec3_array_if(sort_particles(), particle_capacity, false),
        masses: alloc_real_array(particle_capacity, true),
        cell_particles: allocate_array(ncells_capacity, cell_capacity, sizeof[i32](), true),
        cell_sizes: alloc_i32_array(ncells_capacity, true),
        particles_cell: alloc_i32_array(particle_capacity, true),
        neighbors_sizes: alloc_i32_array(particle_capacity, true),
        neighborlists: allocate_array(particle_capacity, neighborlist_capacity, sizeof[i32](), true),
        send_flags: alloc_i8_array(particle_capacity, true),
        counter: alloc_i32_array(1, true),
        resize: alloc_i32_array(1, true)
    }
}

fn rescale_grid(grid: &mut Grid, aabb: AABB) -> () {
    grid.aabb = aabb;
    grid.nx = real_floor(((aabb.xmax - aabb.xmin + (grid.spacing / (2.0 as real_t))) / grid.spacing)) as i32 + 1;
    grid.ny = real_floor(((aabb.ymax - aabb.ymin + (grid.spacing / (2.0 as real_t))) / grid.spacing)) as i32 + 1;
    grid.nz = real_floor(((aabb.zmax - aabb.zmin + (grid.spacing / (2.0 as real_t))) / grid.spacing)) as i32 + 1;
    grid.ncells = grid.nx * grid.ny * grid.nz;

    if !sparse_cell_list() && grid.ncells > grid.ncells_capacity {
        reallocate_ncells_capacity(grid, grid.ncells * 4);
    }
}

fn deallocate_grid(grid: &mut Grid) -> () {
    grid.nparticles = 0;
    grid.nghost = 0;
    release_array(grid.positions);
    release_array(grid.velocities);
    release_array(grid.forces);
    release_array(grid.positions_copy);
    release_array(grid.velocities_copy);
    release_array(grid.masses);
    release_array(grid.cell_particles);
    release_array(grid.cell_sizes);
    release_array(grid.particles_cell);
    release_array(grid.neighbors_sizes);
    release_array(grid.neighborlists);
    release_array(grid.send_flags);
    release_array(grid.counter);
    release_array(grid.resize);
}

fn reallocate_ncells_capacity(grid: &mut Grid, capacity: i32) -> () {
    print_i32_with_rank("reallocate_ncells_capacity()", capacity);
    reallocate_array(&mut grid.cell_particles, capacity, grid.cell_capacity, sizeof[i32](), false);
    reallocate_array(&mut grid.cell_sizes, capacity, 1, sizeof[i32](), false);
    grid.ncells_capacity = capacity;
}

fn reallocate_particle_capacity(grid: &mut Grid, capacity: i32) -> () {
    print_i32_with_rank("reallocate_particle_capacity()", capacity);
    reallocate_array(&mut grid.positions, capacity, 3, sizeof[real_t](), true);
    reallocate_array(&mut grid.velocities, capacity, 3, sizeof[real_t](), true);
    reallocate_array(&mut grid.forces, capacity, 3, sizeof[real_t](), true);
    reallocate_array(&mut grid.masses, capacity, 1, sizeof[real_t](), true);
    reallocate_array(&mut grid.particles_cell, capacity, 1, sizeof[i32](), false);
    reallocate_array(&mut grid.neighbors_sizes, capacity, 1, sizeof[i32](), false);
    reallocate_array(&mut grid.send_flags, capacity, 1, sizeof[i8](), false);
    reallocate_array(&mut grid.neighborlists, capacity, grid.neighborlist_capacity, sizeof[i32](), false);
    grid.particle_capacity = capacity;
}

fn reallocate_cell_capacity(grid: &mut Grid, capacity: i32) -> () {
    print_i32_with_rank("reallocate_cell_capacity()", capacity);
    reallocate_array(&mut grid.cell_particles, grid.ncells_capacity, capacity, sizeof[i32](), false);
    grid.cell_capacity = capacity;
}

fn reallocate_neighborlist_capacity(grid: &mut Grid, capacity: i32) -> () {
    print_i32_with_rank("reallocate_neighborlist_capacity()", capacity);
    reallocate_array(&mut grid.neighborlists, grid.particle_capacity, capacity, sizeof[i32](), false);
    grid.neighborlist_capacity = capacity;
}

fn initialize_grid(
    masses: &[real_t],
    positions: &[Vector3D],
    velocities: &[Vector3D],
    nparticles: i32,
    grid: &mut Grid,
    allocate: fn(i32) -> Buffer) -> () {

    let cell_sizes = get_array_i32_ref(array_host, grid.cell_sizes);

    range(0, grid.ncells, |cell_index| {
        cell_sizes(cell_index) = 0;
    });

    range(0, nparticles, |i| {
        insert_particle(masses(i), positions(i), velocities(i), grid, allocate);
    });
}

fn insert_particle(mass: real_t, position: Vector3D, velocity: Vector3D, grid: &mut Grid, allocate: fn(i32) -> Buffer) -> () {
    let null_vec = Vector3D { x: 0.0 as real_t, y: 0.0 as real_t, z: 0.0 as real_t };
    let particle_index = grid.nparticles;
    let masses = get_array_real_ref(array_host, grid.masses);
    let neighbors_sizes = get_array_i32_ref(array_host, grid.neighbors_sizes);

    if particle_index >= grid.particle_capacity {
        let new_capacity = grid.particle_capacity + grid.particle_capacity / 10 + 10;
        reallocate_particle_capacity(grid, new_capacity);
    }

    masses(particle_index) = mass;
    neighbors_sizes(particle_index) = 0;
    array_2d_set_vec3(array_host, ParticleDataLayout(), grid.positions, particle_index, position);
    array_2d_set_vec3(array_host, ParticleDataLayout(), grid.velocities, particle_index, velocity);
    array_2d_set_vec3(array_host, ParticleDataLayout(), grid.forces, particle_index, null_vec);
    grid.nparticles++;
}

fn add_local_slots(slots: i32, grid: &mut Grid) -> i32 {
    let first_particle_index = grid.nparticles;

    if grid.nghost > 0 {
        print_string("Problem: adding local slots when there are ghost particles!\n");
    }

    if first_particle_index + slots > grid.particle_capacity {
        let new_capacity = grid.particle_capacity + grid.particle_capacity / 10 + slots;
        reallocate_particle_capacity(grid, new_capacity);
    }

    grid.nparticles += slots;
    first_particle_index
}

fn add_ghost_slots(slots: i32, grid: &mut Grid) -> i32 {
    let first_particle_index = grid.nparticles + grid.nghost;

    if first_particle_index + slots > grid.particle_capacity {
        let new_capacity = grid.particle_capacity + grid.particle_capacity / 10 + slots;
        reallocate_particle_capacity(grid, new_capacity);
    }

    grid.nghost += slots;
    first_particle_index
}

fn crop_empty_region(grid: &mut Grid) -> () {
    let b = AABB {
        xmin: grid.aabb.xmax,
        xmax: grid.aabb.xmin,
        ymin: grid.aabb.ymax,
        ymax: grid.aabb.ymin,
        zmin: grid.aabb.zmax,
        zmax: grid.aabb.zmin
    };

    let red_aabb_fn = @|aabb1: AABB, aabb2: AABB| {
        AABB {
            xmin: select(aabb1.xmin < aabb2.xmin, aabb1.xmin, aabb2.xmin),
            xmax: select(aabb1.xmax > aabb2.xmax, aabb1.xmax, aabb2.xmax),
            ymin: select(aabb1.ymin < aabb2.ymin, aabb1.ymin, aabb2.ymin),
            ymax: select(aabb1.ymax > aabb2.ymax, aabb1.ymax, aabb2.ymax),
            zmin: select(aabb1.zmin < aabb2.zmin, aabb1.zmin, aabb2.zmin),
            zmax: select(aabb1.zmax > aabb2.zmax, aabb1.zmax, aabb2.zmax)
        }
    };

    let const_grid = *grid;
    let aabb = reduce_aabb(grid.nparticles, b, red_aabb_fn, @|i| {
        let pos = get_position(i, const_grid);

        AABB {
            xmin: pos.x,
            xmax: pos.x,
            ymin: pos.y,
            ymax: pos.y,
            zmin: pos.z,
            zmax: pos.z
        }
    });

    let cells_x_beg = real_floor((aabb.xmin - grid.aabb.xmin) / grid.spacing) as i32 - 1;
    let cells_x_end = real_floor((aabb.xmax - grid.aabb.xmin) / grid.spacing) as i32 + 2;
    let cells_y_beg = real_floor((aabb.ymin - grid.aabb.ymin) / grid.spacing) as i32 - 1;
    let cells_y_end = real_floor((aabb.ymax - grid.aabb.ymin) / grid.spacing) as i32 + 2;
    let cells_z_beg = real_floor((aabb.zmin - grid.aabb.zmin) / grid.spacing) as i32 - 1;
    let cells_z_end = real_floor((aabb.zmax - grid.aabb.zmin) / grid.spacing) as i32 + 2;

    grid.nx = cells_x_end - cells_x_beg;
    grid.ny = cells_y_end - cells_y_beg;
    grid.nz = cells_z_end - cells_z_beg;
    grid.ncells = grid.nx * grid.ny * grid.nz;
    grid.cells_offset_x = cells_x_beg;
    grid.cells_offset_y = cells_y_beg;
    grid.cells_offset_z = cells_z_beg;

    if grid.ncells >= grid.ncells_capacity {
        reallocate_ncells_capacity(grid, grid.ncells + 20);
    }
}

fn fill_cells(grid: &mut Grid, @ghost: bool) -> () {
    if sparse_cell_list() {
        crop_empty_region(grid);
    }

    let mut resize_cell = 1;

    while resize_cell > 0 {
        let const_grid = *grid;
        let cell_sizes = get_array_i32_ref(array_dev, const_grid.cell_sizes);

        reset_resize(const_grid);
        device().loop_1d(false, const_grid.ncells, |i| {
            cell_sizes(i) = 0;
        });

        particles_scalar(ghost, const_grid, |i| {
            let pos = get_position(i, const_grid);
            let cell_particles = get_array_i32_ref(array_dev, const_grid.cell_particles);
            let particles_cell = get_array_i32_ref(array_dev, const_grid.particles_cell);
            let cell_index = flatten_index(compute_cell_position(pos, const_grid), const_grid);

            if cell_index >= 0 && cell_index < const_grid.ncells {
                let cell_particle_index = device().atomic_add_i32(&mut cell_sizes(cell_index), 1);

                if cell_particle_index >= const_grid.cell_capacity {
                    grow_resize(cell_particle_index, const_grid);
                } else {
                    let cell_offset = get_cell_offset(cell_index, const_grid);
                    cell_particles(cell_offset + cell_particle_index) = i;
                    particles_cell(i) = cell_index;
                }
            }
        });

        resize_cell = get_resize(const_grid);

        if resize_cell > 0 {
            reallocate_cell_capacity(grid, resize_cell * 2);
        }
    }
}

fn distribute_particles(grid: &mut Grid) -> () {
    if sort_particles() {
        fill_cells(grid, false);

        let cell_particles = get_array_i32_ref(array_host, grid.cell_particles);
        let cell_sizes = get_array_i32_ref(array_host, grid.cell_sizes);
        let mut offset = 0;

        range(0, grid.ncells, |cell_index| {
            let cell_offset = get_cell_offset(cell_index, grid);

            range(0, cell_sizes(cell_index), |cell_particle_index| {
                let old_index = cell_particles(cell_offset + cell_particle_index);
                let new_index = offset + cell_particle_index;
                array_2d_copy_vec3(ParticleDataLayout(), grid.positions, grid.positions_copy, old_index, new_index);
                array_2d_copy_vec3(ParticleDataLayout(), grid.velocities, grid.velocities_copy, old_index, new_index);
            });

            offset += cell_sizes(cell_index);
        });

        range(grid.nparticles, grid.nparticles + grid.nghost, |ghost_index| {
            array_2d_copy_vec3(ParticleDataLayout(), grid.positions, grid.positions_copy, ghost_index, ghost_index);
        });

        let pos_copy = grid.positions;
        let vel_copy = grid.velocities;
        grid.positions = grid.positions_copy;
        grid.velocities = grid.velocities_copy;
        grid.positions_copy = pos_copy;
        grid.velocities_copy = vel_copy;
    }

    fill_cells(grid, true);
}

fn copy_to_accelerator(grid: &Grid) -> () {
    transfer_array_to_device(grid.masses);
    transfer_array_to_device(grid.positions);
    transfer_array_to_device(grid.velocities);
    transfer_array_to_device(grid.cell_particles);
    transfer_array_to_device(grid.cell_sizes);
    transfer_array_to_device(grid.particles_cell);
}

fn copy_from_accelerator(grid: &Grid) -> () {
    transfer_array_to_host(grid.masses);
    transfer_array_to_host(grid.positions);
    transfer_array_to_host(grid.velocities);
    transfer_array_to_host(grid.forces);
}

fn set_counter(value: i32, grid: Grid) -> () {
    get_array_i32_ref(array_host, grid.counter)(0) = value;
    transfer_array_to_device(grid.counter);
}

fn get_counter(grid: Grid) -> i32 {
    transfer_array_to_host(grid.counter);
    get_array_i32_ref(array_host, grid.counter)(0)
}

fn add_counter(grid: Grid) -> i32 {
    let counter = get_array_i32_ref(array_dev, grid.counter);
    device().atomic_add_i32(&mut counter(0) as dev_i32_ptr, 1)
}

fn reset_resize(grid: Grid) -> () {
    get_array_i32_ref(array_host, grid.resize)(0) = 0;
    transfer_array_to_device(grid.resize);
}

fn grow_resize(value: i32, grid: Grid) -> () {
    let resize = get_array_i32_ref(array_dev, grid.resize);
    if resize(0) < value { resize(0) = value; }
}

fn get_resize(grid: Grid) -> i32 {
    transfer_array_to_host(grid.resize);
    get_array_i32_ref(array_host, grid.resize)(0)
}

fn write_grid_data_to_arrays(
    masses: &mut[real_t],
    positions: &mut [Vector3D],
    velocities: &mut [Vector3D],
    forces: &mut [Vector3D],
    grid: &Grid) -> i32 {

    let grid_masses = get_array_real_ref(array_host, grid.masses);

    range(0, grid.nparticles, |particle_index| {
        masses(particle_index) = grid_masses(particle_index);
        positions(particle_index) = array_2d_get_vec3(array_host, ParticleDataLayout(), grid.positions, particle_index);
        velocities(particle_index) = array_2d_get_vec3(array_host, ParticleDataLayout(), grid.velocities, particle_index);
        forces(particle_index) = array_2d_get_vec3(array_host, ParticleDataLayout(), grid.forces, particle_index);
    });

    grid.nparticles
}

fn write_grid_ghost_data_to_arrays(
    masses: &mut[real_t],
    positions: &mut [Vector3D],
    velocities: &mut [Vector3D],
    forces: &mut [Vector3D],
    grid: &Grid) -> i32 {

    let grid_masses = get_array_real_ref(array_host, grid.masses);

    range(grid.nparticles, grid.nparticles + grid.nghost, |particle_index| {
        let index = particle_index - grid.nparticles;
        masses(index) = grid_masses(particle_index);
        positions(index) = array_2d_get_vec3(array_host, ParticleDataLayout(), grid.positions, particle_index);
        velocities(index) = array_2d_get_vec3(array_host, ParticleDataLayout(), grid.velocities, particle_index);
        forces(index) = array_2d_get_vec3(array_host, ParticleDataLayout(), grid.forces, particle_index);
    });

    grid.nparticles
}

fn write_grid_aabb_data_to_arrays(
    masses: &mut[real_t],
    positions: &mut [Vector3D],
    velocities: &mut [Vector3D],
    forces: &mut [Vector3D],
    grid: &Grid) -> i32 {

    range(0, 2, |i| {
        range(0, 2, |j| {
            range(0, 2, |k| {
                let index = k * 4 + j * 2 + i;

                masses(index) = 0.0;
                positions(index) = Vector3D {
                    x: select(i == 0, grid.aabb.xmin, grid.aabb.xmax),
                    y: select(j == 0, grid.aabb.ymin, grid.aabb.ymax),
                    z: select(k == 0, grid.aabb.zmin, grid.aabb.zmax)
                };

                velocities(index) = Vector3D { x: 0.0, y: 0.0, z: 0.0 };
                forces(index) = Vector3D { x: 0.0, y: 0.0, z: 0.0 };
            });
        });
    });

    grid.nparticles
}

fn compute_cell_position(position: Vector3D, grid: Grid) -> [i32 * 3] {
    let i = real_floor(((position.x - grid.aabb.xmin) / grid.spacing) as real_t) as i32;
    let j = real_floor(((position.y - grid.aabb.ymin) / grid.spacing) as real_t) as i32;
    let k = real_floor(((position.z - grid.aabb.zmin) / grid.spacing) as real_t) as i32;
    [i, j, k]
}

fn is_within_domain(position: Vector3D, aabb: AABB) -> bool {
    position.x >= aabb.xmin && position.x <= aabb.xmax &&
    position.y >= aabb.ymin && position.y <= aabb.ymax &&
    position.z >= aabb.zmin && position.z <= aabb.zmax
}

fn flatten_index(cell_index: [i32 * 3], grid: &Grid) -> i32 {
    if sparse_cell_list() {
        ((cell_index(2) - grid.cells_offset_z) * grid.ny + (cell_index(1) - grid.cells_offset_y)) * grid.nx +
        cell_index(0) - grid.cells_offset_x
    } else {
        (cell_index(2) * grid.ny + cell_index(1)) * grid.nx + cell_index(0)
    }
}
