static mut grid_ : Grid;
static mut comm_offsets_ : CommOffsets;
static mut force_iters : i64;
static mut rsq_iters : i64;
static mut integration_iters : i64;

extern fn md_set_thread_count(thread_count: i32) -> () { set_thread_count(thread_count); }

extern fn md_initialize_grid(
    masses: &[real_t], positions: &[Vector3D], velocities: &[Vector3D], nparticles: i32,
    aabb: &[real_t], rank_aabb: &[real_t],
    cell_spacing: real_t,
    cell_capacity: i32, neighborlist_capacity: i32) -> i32 {

    let world_aabb = AABB {
        xmin: aabb(0),
        xmax: aabb(1),
        ymin: aabb(2),
        ymax: aabb(3),
        zmin: aabb(4),
        zmax: aabb(5)
    };

    let ext_rank_aabb = AABB {
        xmin: rank_aabb(0) - cell_spacing,
        xmax: rank_aabb(1) + cell_spacing,
        ymin: rank_aabb(2) - cell_spacing,
        ymax: rank_aabb(3) + cell_spacing,
        zmin: rank_aabb(4) - cell_spacing,
        zmax: rank_aabb(5) + cell_spacing
    };

    grid_ = allocate_grid(world_aabb, ext_rank_aabb, cell_spacing, cell_capacity, neighborlist_capacity);
    comm_offsets_ = alloc_comm_offsets(grid_);
    initialize_grid(masses, positions, velocities, nparticles, &mut grid_, alloc_cpu);
    initialize_neighborhood();
    device().init(grid_);

    grid_.nparticles
}

extern fn md_rescale_grid(aabb_data: &[real_t]) -> () {
    let aabb = AABB {
        xmin: aabb_data(0) - grid_.spacing,
        xmax: aabb_data(1) + grid_.spacing,
        ymin: aabb_data(2) - grid_.spacing,
        ymax: aabb_data(3) + grid_.spacing,
        zmin: aabb_data(4) - grid_.spacing,
        zmax: aabb_data(5) + grid_.spacing
    };

    rescale_grid(&mut grid_, aabb);
}

extern fn md_get_node_bounding_box(aabb_data: &[real_t], rank_data: &mut[real_t]) -> () {
    let aabb = AABB {
        xmin: aabb_data(0),
        xmax: aabb_data(1),
        ymin: aabb_data(2),
        ymax: aabb_data(3),
        zmin: aabb_data(4),
        zmax: aabb_data(5)
    };

    let rank_aabb = get_node_bounding_box(aabb);

    rank_data(0) = rank_aabb.xmin;
    rank_data(1) = rank_aabb.xmax;
    rank_data(2) = rank_aabb.ymin;
    rank_data(3) = rank_aabb.ymax;
    rank_data(4) = rank_aabb.zmin;
    rank_data(5) = rank_aabb.zmax;
}

extern fn md_compute_boundary_weights(
    xmin: real_t, xmax: real_t, ymin: real_t, ymax: real_t, zmin: real_t, zmax: real_t,
    computational_weight: &mut u32, communication_weight: &mut u32) -> () {

    let grid = grid_;
    let sum = @|a: i32, b: i32| { a + b };
    let aabb = AABB {
        xmin: xmin,
        xmax: xmax,
        ymin: ymin,
        ymax: ymax,
        zmin: zmin,
        zmax: zmax
    };

    *computational_weight = reduce_i32(grid.nparticles, 0, sum, |i| {
        let pos = array_get(ParticleDataLayout(), grid.positions, i);
        select(is_within_domain(pos, aabb), 1, 0)
    }) as u32;

    *communication_weight = reduce_i32(grid.nghost, 0, sum, |i| {
        let pos = array_get(ParticleDataLayout(), grid.positions, grid.nparticles + i);
        select(is_within_domain(pos, aabb), 1, 0)
    }) as u32;
}

extern fn md_deallocate_grid() -> () {
    release_neighborhood();
    release_comm_offsets(comm_offsets_);
    deallocate_grid(&mut grid_);
    device().shutdown();
}

extern fn md_copy_data_to_accelerator() -> () { copy_to_accelerator(grid_); }
extern fn md_copy_data_from_accelerator() -> () { copy_from_accelerator(grid_); }
extern fn md_integration(dt: real_t) -> () { integration_iters = integration(grid_, dt); }
extern fn md_initial_integration(dt: real_t) -> () { integration_iters = initial_integration(grid_, dt); }
extern fn md_final_integration(dt: real_t) -> () { integration_iters = final_integration(grid_, dt); }

extern fn md_write_grid_data_to_arrays(
    masses: &mut[real_t],
    positions: &mut [Vector3D],
    velocities: &mut [Vector3D],
    forces: &mut [Vector3D]) -> i32 {

    write_grid_data_to_arrays(masses, positions, velocities, forces, &grid_)
}

extern fn md_write_grid_ghost_data_to_arrays(
    masses: &mut[real_t],
    positions: &mut [Vector3D],
    velocities: &mut [Vector3D],
    forces: &mut [Vector3D]) -> i32 {

    write_grid_ghost_data_to_arrays(masses, positions, velocities, forces, &grid_)
}

extern fn md_write_grid_aabb_data_to_arrays(
    masses: &mut[real_t],
    positions: &mut [Vector3D],
    velocities: &mut [Vector3D],
    forces: &mut [Vector3D]) -> i32 {

    write_grid_aabb_data_to_arrays(masses, positions, velocities, forces, &grid_)
}

extern fn md_distribute_particles() -> () { distribute_particles(&mut grid_); }
extern fn md_borders() -> () { borders(&mut grid_, &mut comm_offsets_); }
extern fn md_exchange_particles() -> () { exchange_particles(&mut grid_, &mut comm_offsets_); }
extern fn md_initialize_clusters() -> () { }
extern fn md_assemble_neighborlists(half_neighborlist: bool, cutoff_distance: real_t) -> () {
    let half_nb = select(half_neighborlist, 1, 0);
    assemble_neighborlists(&mut grid_, half_nb, cutoff_distance);
}

extern fn md_print_grid() -> () {
    range(0, grid_.nparticles, |particle_index| {
        let pos = array_get_host(ParticleDataLayout(), grid_.positions, particle_index);
        print_real_vector_with_rank("pos_local", pos);
    });

    range(0, grid_.nparticles, |particle_index| {
        let vel = array_get_host(ParticleDataLayout(), grid_.velocities, particle_index);
        print_real_vector_with_rank("vel_local", vel);
    });
}

extern fn md_print_ghost() -> () {
    range(grid_.nparticles, grid_.nparticles + grid_.nghost, |particle_index| {
        let pos = array_get_host(ParticleDataLayout(), grid_.positions, particle_index);
        print_real_vector_with_rank("pos_ghost", pos);
    });

    range(grid_.nparticles, grid_.nparticles + grid_.nghost, |particle_index| {
        let vel = array_get_host(ParticleDataLayout(), grid_.velocities, particle_index);
        print_real_vector_with_rank("vel_ghost", vel);
    });
}

extern fn md_compute_lennard_jones(half_neighborlist: bool, cutoff_distance: real_t, epsilon: real_t, sigma: real_t) -> () {
    let half_nb = select(half_neighborlist, 1, 0);
    let sigma6 = pow(sigma, 6);
    let (iforces, irsq) = compute_potential(grid_, half_nb, cutoff_distance * cutoff_distance, @|_, _, _, _, del, rsq| {
        let sr2 = 1.0 / rsq;
        let sr6 = sr2 * sr2 * sr2 * sigma6;
        let f = 48.0 * sr6 * (sr6 - 0.5) * sr2 * epsilon;

        vector_scale(f, del)
    });

    force_iters = iforces;
    rsq_iters = irsq;
}

extern fn md_compute_dem(
    half_neighborlist: bool, cutoff_distance: real_t,
    damping_n: real_t, damping_t: real_t, stiffness: real_t, friction: real_t) -> () {

    let grid = grid_;
    let half_nb = select(half_neighborlist, 1, 0);
    let radius = 1.0;
    let square =        @|a: real_t| { a * a };
    let vector_len =    @|v: Vector3D| { device().sqrt(vector_len2(v)) };
    let vector_normal = @|v: Vector3D, len: real_t| { vector_scale(1.0 / len, v) };

    let (iforces, irsq) = compute_potential(grid, half_nb, cutoff_distance * cutoff_distance, @|i, j, _, pos_j, del, rsq| {
        let mut result = Vector3D { x: 0.0, y: 0.0, z: 0.0 };

        if rsq < square(radius * 2.0) {
            let del_length = math.sqrt(rsq);
            let penetration_depth = del_length - radius * 2.0;

            if penetration_depth > 0.0 {
                let normal = vector_normal(del, del_length);
                let contact_point = vector_add(vector_scale(radius + 0.5 * penetration_depth, normal), pos_j);
                let vel1 = array_get(ParticleDataLayout(), grid.velocities, i);
                let vel2 = array_get(ParticleDataLayout(), grid.velocities, j);

                let rel_vel = vector_sub(vel1, vel2);
                let rel_vel_normal = vector_dot(rel_vel, normal);
                let rel_vel_tan = vector_sub(rel_vel, vector_scale(rel_vel_normal, normal));
                let rel_vel_tan_length = vector_len(rel_vel_tan);

                let fn_abs = damping_n * rel_vel_normal - stiffness * penetration_depth;
                let fnormal = vector_scale(fn_abs, normal);

                let ft_abs_term1 = damping_t * rel_vel_tan_length;
                let ft_abs_term2 = friction * fn_abs;
                let ft_abs = select(ft_abs_term1 < ft_abs_term2, ft_abs_term1, ft_abs_term2);
                let ftan = vector_scale(ft_abs, vector_normal(rel_vel_tan, rel_vel_tan_length));

                result = vector_add(fnormal, ftan)
            }
        }

        result
    });

    force_iters = iforces;
    rsq_iters = irsq;
}

extern fn md_compute_total_kinetic_energy() -> real_t { 0.0 as real_t }
extern fn md_mpi_initialize() -> () { mpi_initialize(); }
extern fn md_mpi_finalize() -> () { mpi_finalize(); }
extern fn md_synchronize_ghost_layer() -> () { synchronize_ghost_layer(grid_, comm_offsets_); }
extern fn md_barrier() -> () { barrier(); }
extern fn md_get_world_size() -> i32 { get_world_size() }
extern fn md_get_world_rank() -> i32 { get_process_rank() }
extern fn md_get_number_of_particles() -> i32 { grid_.nparticles }
extern fn md_get_number_of_ghost_particles() -> i32 { grid_.nghost }
extern fn md_get_send_buffer_value(index: i32) -> real_t { get_real(index, comm_offsets_.send_buffer) }
extern fn md_set_recv_buffer_value(index: i32, value: real_t) -> () { set_real(index, comm_offsets_.recv_buffer, value) }
extern fn md_resize_recv_buffer_capacity(capacity: i32) -> () {
    if comm_offsets_.recv_capacity < capacity {
        resize_recv_capacity(&mut comm_offsets_, capacity);
    }
}

extern fn md_serialize_particles(aabb_data: &[real_t]) -> i32 {
    let aabb = AABB {
        xmin: aabb_data(0),
        xmax: aabb_data(1),
        ymin: aabb_data(2),
        ymax: aabb_data(3),
        zmin: aabb_data(4),
        zmax: aabb_data(5)
    };

    serialize_and_remove(&mut grid_, &mut comm_offsets_, @|p| { is_within_domain(p, aabb) })
}

extern fn md_deserialize_particles(nparticles: i32) -> () { deserialize_particles(&mut grid_, &mut comm_offsets_, nparticles); }
extern fn md_get_mass(particle_index: i32) -> real_t { get_real(particle_index, grid_.masses_cpu) }
extern fn md_get_position(particle_index: i32, x: &mut real_t, y: &mut real_t, z: &mut real_t) -> () {
    let pos = array_get_host(ParticleDataLayout(), grid_.positions, particle_index);
    *x = pos.x;
    *y = pos.y;
    *z = pos.z;
}

extern fn md_get_velocity(particle_index: i32, x: &mut real_t, y: &mut real_t, z: &mut real_t) -> () {
    let vel = array_get_host(ParticleDataLayout(), grid_.velocities, particle_index);
    *x = vel.x;
    *y = vel.y;
    *z = vel.z;
}

extern fn md_create_particle(mass: real_t, px: real_t, py: real_t, pz: real_t, vx: real_t, vy: real_t, vz: real_t) -> () {
    let position = Vector3D { x: px, y: py, z: pz };
    let velocity = Vector3D { x: vx, y: vy, z: vz };

    insert_particle(mass, position, velocity, &mut grid_, alloc_cpu);
}

extern fn md_report_iterations() -> () {
    let is_root = get_process_rank() == 0;
    let print_string_once = |s: &[u8]| { print_string_cond(is_root, s); };
    let reduce_and_print = |t: i64| {
        let mut res: i64;
        reduce_i64_sum(t, &mut res);
        print_i64_cond(is_root, res);
        print_string_once(" ");
    };

    barrier();
    print_string_once("ForceIters RsqIters IntegrationIters\n");

    reduce_and_print(force_iters);
    reduce_and_print(rsq_iters);
    reduce_and_print(integration_iters);

    print_string_once("\n");
}

extern fn md_report_particles() -> () {
    let is_root = get_process_rank() == 0;
    let print_string_once = |s: &[u8]| { print_string_cond(is_root, s); };
    let reduce_and_print = |t: i32| {
        let mut res: i32;
        reduce_i32_sum(t, &mut res);
        print_i32_cond(is_root, res);
        print_string_once(" ");
    };

    barrier();
    print_string_once("# Local # Ghost\n");

    reduce_and_print(grid_.nparticles);
    reduce_and_print(grid_.nghost);

    print_string_once("\n");
}

extern fn md_report_time(total_avg: f64, force_avg: f64, neigh_avg: f64, comm_avg: f64, lb_avg: f64, other_avg: f64) -> () {

    let is_root = get_process_rank() == 0;
    let print_string_once = |s: &[u8]| { print_string_cond(is_root, s); };
    let reduce_and_print = |t: f64| {
        let mut res: f64;
        reduce_time(t, &mut res);
        print_f64_cond(is_root, res);
        print_string_once(" ");
    };

    barrier();
    print_string_once("Total Force Neigh Comm Balance Other\n");

    /*
    print_i32(get_process_rank());  print_string("> ");
    print_f64(total_avg);           print_string(", ");
    print_f64(force_avg);           print_string(", ");
    print_f64(neigh_avg);           print_string(", ");
    print_f64(comm_avg);            print_string(", ");
    print_f64(lb_avg);              print_string(", ");
    print_f64(other_avg);           print_string("\n");
    barrier();
    */

    reduce_and_print(total_avg);
    reduce_and_print(force_avg);
    reduce_and_print(neigh_avg);
    reduce_and_print(comm_avg);
    reduce_and_print(lb_avg);
    reduce_and_print(other_avg);

    print_string_once("\n");
}
