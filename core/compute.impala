fn @(?half_nb) compute_potential(
    grid: Grid, @half_nb: i32, rsq_cutoff: real_t,
    potential: fn(Particle, i32, i32, Vector3D, Vector3D, Vector3D, real_t) -> Vector3D) -> (i64, i64) {

    let mut total_iters = 0 as i64;
    let mut rsq_iters = 0 as i64;

    if half_nb != 0 {
        particles_vec(false, grid, |i, particle| {
            particle.set_force(i, Vector3D { x: 0.0, y: 0.0, z: 0.0 });
        });
    }

    particles_vec(false, grid, |i, particle| {
        let pos_i = particle.get_position(i);
        let mut force = Vector3D { x: 0.0 as real_t, y: 0.0 as real_t, z: 0.0 as real_t };

        particle.neighbors(i, |j| {
            let pos_j = particle.get_position(j);
            let del = vector_sub(pos_i, pos_j);
            let rsq = vector_len2(del);

            if rsq < rsq_cutoff {
                let f = potential(particle, i, j, pos_i, pos_j, del, rsq);

                if half_nb == 0 {
                    force = vector_add(force, f);
                } else {
                    particle.add_force(i, f);

                    if j < grid.nparticles {
                        particle.add_force(j, Vector3D { x: -f.x, y: -f.y, z: -f.z });
                    }
                }

                device().add_iterator(&mut rsq_iters);
            }

            device().add_iterator(&mut total_iters);
        });

        if half_nb == 0 {
            particle.set_force(i, force);
        }
    });

    (total_iters, rsq_iters)
}

fn integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;

    particles_vec(false, grid, |i, particle| {
        let inverse_mass = 1.0 as real_t / particle.get_mass(i);
        let mut position = particle.get_position(i);
        let mut velocity = particle.get_velocity(i);
        let force = particle.get_force(i);

        velocity.x += dt * force.x * inverse_mass;
        velocity.y += dt * force.y * inverse_mass;
        velocity.z += dt * force.z * inverse_mass;
        position.x += dt * velocity.x;
        position.y += dt * velocity.y;
        position.z += dt * velocity.z;
        particle.set_velocity(i, velocity);
        particle.set_position(i, position);
        device().add_iterator(&mut iters);
    });

    iters
}

fn initial_integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;
    let dtforce = 0.5 * dt;

    particles_vec(false, grid, |i, particle| {
        let mut position = particle.get_position(i);
        let mut velocity = particle.get_velocity(i);
        let force = particle.get_force(i);

        velocity.x += dtforce * force.x;
        velocity.y += dtforce * force.y;
        velocity.z += dtforce * force.z;
        position.x += dt * velocity.x;
        position.y += dt * velocity.y;
        position.z += dt * velocity.z;
        particle.set_velocity(i, velocity);
        particle.set_position(i, position);
        device().add_iterator(&mut iters);
    });

    iters
}

fn final_integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;
    let dtforce = 0.5 * dt;

    particles_vec(false, grid, |i, particle| {
        let mut velocity = particle.get_velocity(i);
        let force = particle.get_force(i);

        velocity.x += dtforce * force.x;
        velocity.y += dtforce * force.y;
        velocity.z += dtforce * force.z;
        particle.set_velocity(i, velocity);
        device().add_iterator(&mut iters);
    });

    iters
}

fn enforce_pbc(grid: Grid) -> () {
    particles_vec(false, grid, |i, particle| {
        particle.set_position(i, pbc_corrected_position_if(true, particle.get_position(i), grid));
    });
}
