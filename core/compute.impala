fn @(?n) pow(x: real_t, n: i32) -> real_t {
    if n == 1 {
        x
    } else if n % 2 == 0 {
        let y = pow(x, n / 2);
        y * y
    } else {
        x * pow(x, n - 1)
    }
}

fn accelerator_compute_particle_forces(grid: Grid, rsq_cutoff: real_t, epsilon: real_t, sigma: real_t) -> (i64, i64) {
    let mut total_iters = 0 as i64;
    let mut rsq_iters = 0 as i64;
    let sigma6 = pow(sigma, 6);

    loop_accelerator(grid, |i, neighborlists, nb_list_size, nb_list_offset| {
        let mut force = Vector3D {
            x: 0.0 as real_t,
            y: 0.0 as real_t,
            z: 0.0 as real_t
        };

        let pos = get_position(i, grid);

        for n in range(0, nb_list_size) {
            let neighbor_index = neighborlists(get_neighborlist_index(i, n, grid));
            let pos_neighbor = get_position(neighbor_index, grid);
            let del = vector_sub(pos, pos_neighbor);
            let rsq = vector_len2(del);

            if rsq < rsq_cutoff {
                let sr2 = 1.0 / rsq;
                let sr6 = sr2 * sr2 * sr2 * sigma6;
                let f = 48.0 * sr6 * (sr6 - 0.5) * sr2 * epsilon;

                force = vector_add(force, vector_scale(f, del));
                add_iterator(&mut rsq_iters);
            }

            add_iterator(&mut total_iters);
        }

        set_force(i, grid, force);
    });

    (total_iters, rsq_iters)
}

fn accelerator_integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;

    loop_accelerator(grid, |i, _, _, _| {
        let masses = get_masses(grid);
        let inverse_mass = 1.0 as real_t / masses(i);
        let mut position = get_position(i, grid);
        let mut velocity = get_velocity(i, grid);
        let force = get_force(i, grid);

        velocity.x += dt * force.x * inverse_mass;
        velocity.y += dt * force.y * inverse_mass;
        velocity.z += dt * force.z * inverse_mass;

        position.x += dt * velocity.x;
        position.y += dt * velocity.y;
        position.z += dt * velocity.z;

        set_velocity(i, grid, velocity);
        set_position(i, grid, position);

        add_iterator(&mut iters);
    });

    iters
}

fn accelerator_initial_integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;
    let dtforce = 0.5 * dt;

    loop_accelerator(grid, |i, _, _, _| {
        let mut position = get_position(i, grid);
        let mut velocity = get_velocity(i, grid);
        let force = get_force(i, grid);

        velocity.x += dtforce * force.x;
        velocity.y += dtforce * force.y;
        velocity.z += dtforce * force.z;

        position.x += dt * velocity.x;
        position.y += dt * velocity.y;
        position.z += dt * velocity.z;

        set_velocity(i, grid, velocity);
        set_position(i, grid, position);

        @@add_iterator(&mut iters);
    });

    iters
}

fn accelerator_final_integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;
    let dtforce = 0.5 * dt;

    loop_accelerator(grid, |i, _, _, _| {
        let mut velocity = get_velocity(i, grid);
        let force = get_force(i, grid);

        velocity.x += dtforce * force.x;
        velocity.y += dtforce * force.y;
        velocity.z += dtforce * force.z;

        set_velocity(i, grid, velocity);

        @@add_iterator(&mut iters);
    });

    iters
}
