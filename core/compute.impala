fn @(?half_nb) compute_potential(
    grid: Grid, half_nb: bool, rsq_cutoff: real_t,
    potential: fn(Particle, i32, i32, Vector3D, Vector3D, Vector3D, real_t) -> Vector3D) -> (i64, i64) {

    let mut total_iters = 0 as i64;
    let mut rsq_iters = 0 as i64;

    if half_nb {
        particles_vec(false, grid, |i, particle| {
            particle.set_force(i, Vector3D { x: 0.0, y: 0.0, z: 0.0 });
        });
    }

    particles_vec(false, grid, |i, particle| {
        let pos_i = particle.get_position(i);
        let mut force = Vector3D { x: 0.0 as real_t, y: 0.0 as real_t, z: 0.0 as real_t };

        particle.neighbors(i, |j| {
            let pos_j = particle.get_position(j);
            let del = vector_sub(pos_i, pos_j);
            let rsq = vector_len2(del);

            if rsq < rsq_cutoff {
                let f = @@potential(particle, i, j, pos_i, pos_j, del, rsq);

                if !half_nb {
                    force = vector_add(force, f);
                } else {
                    particle.add_force(i, f);

                    if j < grid.nparticles {
                        particle.add_force(j, Vector3D { x: -f.x, y: -f.y, z: -f.z });
                    }
                }

                device().add_iterator(&mut rsq_iters);
            }

            device().add_iterator(&mut total_iters);
        });

        if !half_nb {
            particle.set_force(i, force);
        }
    });

    (total_iters, rsq_iters)
}

fn compute_lj_fullneigh(grid: Grid, rsq_cutoff: real_t, epsilon: real_t, sigma: real_t) -> (i64, i64) {
    let dev = device();
    let sigma6 = pow(sigma, 6);
    let mut total_iters = 0 as i64;
    let mut rsq_iters = 0 as i64;

    particles_vec(false, grid, |i, particle| {
        particle.set_force(i, Vector3D { x: 0.0, y: 0.0, z: 0.0 });
    });

    particles_vec(false, grid, |i, particle| {
        let mut force = Vector3D {
            x: 0.0 as real_t,
            y: 0.0 as real_t,
            z: 0.0 as real_t
        };

        let pos_i = particle.get_position(i);
        let mut n = 0;

        particle.neighbors(i, |j| {
            let pos_j = particle.get_position(j);
            let delx = pos_i.x - pos_j.x;
            let dely = pos_i.y - pos_j.y;
            let delz = pos_i.z - pos_j.z;
            let rsq = delx * delx + dely * dely + delz * delz;

            if rsq < rsq_cutoff {
                let sr2 = 1.0 / rsq;
                let sr6 = sr2 * sr2 * sr2 * sigma6;
                let f = 48.0 * sr6 * (sr6 - 0.5) * sr2 * epsilon;
                force.x += delx * f;
                force.y += dely * f;
                force.z += delz * f;
                dev.add_iterator(&mut rsq_iters);
            }

            dev.add_iterator(&mut total_iters);
            n++;
        });

        particle.set_force(i, force);
    });

    (total_iters, rsq_iters)
}

fn initial_integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;
    particles_vec(false, grid, |i, particle| {
        particle.set_velocity(i, vector_add(particle.get_velocity(i), vector_scale(0.5 * dt, particle.get_force(i))));
        particle.set_position(i, vector_add(particle.get_position(i), vector_scale(dt, particle.get_velocity(i))));
        device().add_iterator(&mut iters);
    });

    iters
}

fn final_integration(grid: Grid, dt: real_t) -> i64 {
    let mut iters = 0 as i64;
    particles_vec(false, grid, |i, particle| {
        particle.set_velocity(i, vector_add(particle.get_velocity(i), vector_scale(0.5 * dt, particle.get_force(i))));
        device().add_iterator(&mut iters);
    });

    iters
}

fn enforce_pbc(grid: Grid) -> () {
    particles_vec(false, grid, |i, particle| {
        particle.set_position(i, pbc_corrected_position_if(true, particle.get_position(i), grid));
    });
}
