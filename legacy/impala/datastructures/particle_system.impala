struct ParticleSystem {
    np: fn() -> size_t,
    nc: fn() -> [size_t * 3],
    ghost_layer: fn() -> size_t,
    start: fn() -> [size_t * 3],
    end: fn() -> [size_t * 3],
    domain: fn() -> Vector,
    shadow_offset: fn() -> real,
    coordinate_shift: fn() -> Vector,
    head: fn(size_t) -> &mut &mut ParticleList,
    constants: fn() -> Constants,
    addresses: fn() -> ArrayOfAddresses,
    data_cells: fn() -> &[i8],
    data_addresses: fn() -> &[i8]
}



fn get_particle_system(np: size_t, nc: [size_t * 3], ghost_layer: size_t, domain: Vector, coordinate_shift: Vector, data_cells: &[i8], constants: Constants, data_addresses: &[i8]) -> ParticleSystem {
    ParticleSystem {
        np: @|| {np},
        nc: @|| {nc},
        ghost_layer: @|| {ghost_layer},
        start: @|| {
            let mut start : [size_t * 3];
            for d in map_range(0 as size_t, DIMENSION) {
                start(d) = ghost_layer;
            }
            start
        },
        end: @|| {
            let mut end : [size_t * 3];
            for d in map_range(0 as size_t, DIMENSION) {
                end(d) = nc(d) - ghost_layer;
            }
            end
        },
        domain: @|| {domain},
        shadow_offset: @|| {ghost_layer as real * constants.r_cut()},
        coordinate_shift: @|| {coordinate_shift},
        head: @|i| {&mut bitcast[&mut[&mut ParticleList]](data_cells)(i)},
        constants: @|| {constants},
        addresses: @|| {get_array_of_addresses(np, data_addresses)},
        data_cells: @|| {data_cells},
        data_addresses: @|| {data_addresses}
    }
}

struct ParticleSystemData {
    np: size_t,
    nc: [size_t * 3],
    ghost_layer: size_t,
    domain: [real * 3],
    coordinate_shift: [real * 3],
    constants: ConstantsData,
    data_cells: &[i8],
    data_addresses: &[i8]
}

fn get_particle_system_from_data_struct(P_data: ParticleSystemData) -> ParticleSystem {
    get_particle_system(P_data.np, P_data.nc, P_data.ghost_layer, get_vector(P_data.domain), get_vector(P_data.coordinate_shift), P_data.data_cells, get_constants_from_data(P_data.constants), P_data.data_addresses)
}

fn get_data_struct_from_particle_system(P: ParticleSystem) -> ParticleSystemData {
    ParticleSystemData {
        np: P.np(),
        nc: P.nc(),
        ghost_layer: P.ghost_layer(),
        domain: P.domain().get(),
        coordinate_shift: P.coordinate_shift().get(),
        constants: get_data_from_constants(P.constants()),
        data_cells: P.data_cells(),
        data_addresses: P.data_addresses()
    }
}




fn allocate_particle_system(np: size_t, ghost_layer: size_t, domain: Vector, coordinate_shift: Vector, constants: Constants) -> ParticleSystem {
    let mut nc : [size_t * 3];
    let mut pnc = 1 as size_t;
    let extended_domain = increase_vector(domain, 2.0*(ghost_layer as real) * constants.r_cut()); 
    for d in map_range(0 as size_t, DIMENSION){
        nc(d) = math.floor(domain.get()(d)/constants.r_cut()) as size_t + (2 as size_t * ghost_layer);
        pnc *= nc(d);
    }
    let data_cells = allocate_and_initialize(pnc * sizeof[&mut ParticleList]() as size_t, 0);
    //print_string("Data size: ");
    //print_double((pnc * sizeof[&mut ParticleList]() as size_t + np * (SIZEOFPARTICLE + sizeof[ParticleList]() as size_t) ) as real / 1e6);
    //print_string(" MB\n");
    let data_addresses = allocate(np * sizeof[&[i8]]() as size_t);
    let P = get_particle_system(np, nc, ghost_layer, extended_domain, coordinate_shift, data_cells, constants, data_addresses);
    P
}

fn deallocate_particle_system(P: ParticleSystem) -> () {
    let z = 0 as size_t;
    let start = [z,z,z];
    let end = P.nc();
    for i in map_range(start(0), end(0)) {
        for j in map_range(start(1), end(1)) {
            for k in map_range(start(2), end(2)) {
                let ic = [i,j,k];
                let head = P.head(index(ic, P.nc()));
                delete_list(head);
            }
        }
    }
    deallocate(P.data_cells());
    deallocate(P.data_addresses());
}

fn print_particle_system(P: ParticleSystem) -> () {
    for ic, head in map_particle_cells([SIZE_T_0,..3], P.nc(), P) {
        if(head != 0 as &mut ParticleList) { 
            print_string("Cell \t");
            for d in map_range(SIZE_T_0, DIMENSION) {
                print_i64(ic(d) as i64);
                print_string(" \t");
            }
            print_string("\n");
            for pl in map_list(head) {
                let p = get_particle_from_node(pl);
                let pos = p.getCoordinates().get();
                let vel = p.getVelocities().get();
                let force = p.getForces().get();
                print_string("Position: \t");
                for d in map_range(SIZE_T_0, DIMENSION) {
                    print_f64(pos(d));
                    print_string(" \t");
                }
                print_string("\n");
                print_string("Velocity: \t");
                for d in map_range(SIZE_T_0, DIMENSION) {
                    print_f64(vel(d));
                    print_string(" \t");
                }
                print_string("\n");

                print_string("Force: \t");
                for d in map_range(SIZE_T_0, DIMENSION) {
                    print_f64(force(d));
                    print_string(" \t");
                }

                print_string("\n");
            }

            print_string("\n");
        }
    }
}


