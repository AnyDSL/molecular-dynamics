fn print_error(ic: [size_t * 3], component: &[u8], error: &[u8]) -> () {
    print_string("Error in ");
    print_string(component);
    print_string(" of particle in cell (");
    print_i64(ic(0) as i64);
    print_string(", ");
    print_i64(ic(1) as i64);
    print_string(", ");
    print_i64(ic(2) as i64);
    print_string("): ");
    print_string(error);
    print_string("\n");
}

fn check_invariants(P: ParticleSystem) -> bool {
    let mut status = true;
    
    // Check simulation parameters
    let domain = P.domain();
    let start = P.start();
    let end = P.end();
    let zero_array = [SIZE_T_0,..3];
    let nc = P.nc();
    for d in map_range(SIZE_T_0, DIMENSION) {
        if(domain.get()(d) < 0.0) {
            print_string("Invalid simulation domain\n");
            status = false;
        }
        if(start(d) > end(d)) {
            print_string("start > end\n");
            status = false;
        }
        if(end(d) > P.nc()(d)) {
            print_string("end > nc\n");
            status = false;
        }
        if(start(d) - zero_array(d) != nc(d) - end(d)) {
            print_string("Shadow_offset uneven\n");
            status = false;
        }
    }


    if(status == false) {
        print_string("Invalid Simulation parameters!\n");
    } else {
        // Check particles
        for ic, pl, isLocal in map_particle_system_with_ghost_layers([SIZE_T_0,..3], P.nc(), P.start(), P.end(), P) {
            let p = get_particle_from_node(pl);
            let X = p.getCoordinates().get();
            let V = p.getVelocities().get();
            let F = p.getForces().get();
            let F_old = p.getForces_old().get();
            let kc = compute_cell_position(p, P);
            for d in map_range(SIZE_T_0, DIMENSION) {
                // Check position

                if(math.isinf(X(d)) != 0) {
                    print_error(ic, "Position", "Infinity");
                    status = false;
                }
                else if(math.isnan(X(d)) != 0) {
                    print_error(ic, "Position", "NaN");
                    status = false;
                }

                if(X(d) + P.shadow_offset() + P.coordinate_shift().get()(d) < 0.0 || X(d) + P.shadow_offset() + P.coordinate_shift().get()(d) > P.domain().get()(d)) {
                    print_error(ic, "Position", "Negative number");
                    status = false;
                }
                if(math.isinf(V(d)) != 0) {
                    print_error(ic, "Velocity", "Infinity");
                    status = false;
                }
                else if(math.isnan(V(d)) != 0) {
                    print_error(ic, "Velocity", "NaN");
                    status = false;
                }
                if(math.isinf(F(d)) != 0) {
                    print_error(ic, "Force", "Infinity");
                    status = false;
                }
                else if(math.isnan(F(d)) != 0) {
                    print_error(ic, "Force", "NaN");
                    status = false;
                }
                if(isLocal && math.isinf(F_old(d)) != 0) {
                    print_error(ic, "Old force", "Infinity");
                    status = false;
                }
                else if(isLocal && math.isnan(F_old(d)) != 0) {
                    print_error(ic, "Old force", "NaN");
                    status = false;
                }            
            }
            // Check cell index
            let mut out_of_range = false;
            for d in map_range(SIZE_T_0, DIMENSION) {
                if(kc(d) >= nc(d)) {
                    out_of_range = true;
                }
            }
            if(out_of_range) {
                print_error(ic, "Cell index", "Out of range");
                print_string("Cell index: ("); 
                print_f64(X(0) + P.shadow_offset() + P.coordinate_shift().get()(0) );
                print_string(", "); 
                print_f64(X(1) + P.shadow_offset() + P.coordinate_shift().get()(1));
                print_string(", "); 
                print_f64(X(2) + P.shadow_offset() + P.coordinate_shift().get()(2));
                print_string(") ");
                print_string("Domain: (");
                print_f64(domain.get()(0));
                print_string(", "); 
                print_f64(domain.get()(1));
                print_string(", "); 
                print_f64(domain.get()(2));
                print_string(")\n");
                status = false;
            }
        }

        // Check cells
        let mut count = SIZE_T_0;
        for ic, pl in map_particle_system([SIZE_T_0,..3], P.nc(), P) {
            ++count;
        }
        if(count > P.np()) {
            print_string("Counted less particles in the cells than specified\n");
            status = false;
        }
        else if(count < P.np()) {
            print_string("Counted more particles in the cells than specified\n");
            status = false; 
        }
    }
    status
}

fn check_vector_invariants(vector: ParticleVector, P: ParticleSystem) -> () {
    let start = P.start();
    let end = P.end();
    for k in map_range(start(2), end(2)) {
        for j in map_range(start(1), end(1)) {
            for i in map_range(start(0), end(0)) {
                let mut count = SIZE_T_0;
                let ic = [i,j,k];
                let index = index(ic, vector.nc());
                let cell = vector.getCell(index);
                let head = *P.head(index);
                for pl in map_list(head) {
                    ++count;
                }
                if(count != cell.size) {
                    print_string("Error: The size of cell (");
                    print_i64(ic(0) as i64);
                    print_string(", ");
                    print_i64(ic(1) as i64);
                    print_string(", ");
                    print_i64(ic(2) as i64);
                    print_string(") does not match the number of particles in the system.");
                }
                if(cell.size > cell.padded_size) {
                    print_string("Error: The padded size of cell (");
                    print_i64(ic(0) as i64);
                    print_string(", ");
                    print_i64(ic(1) as i64);
                    print_string(", ");
                    print_i64(ic(2) as i64);
                    print_string(") is smaller than its size.");
                }
            }
        }
    }

}

