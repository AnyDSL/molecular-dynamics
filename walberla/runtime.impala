static mut P_data_ : ParticleSystemData;

extern
fn pe_initialize_particle_system(np: size_t, ghost_layer: size_t, l: &[real]) -> () { 
    init_constants(&mut P_data_.constants);
    let l_v = get_vector([l(0), l(1), l(2)]);    
    let P = allocate_particle_system(np, ghost_layer, l_v, P_data_.constants); 
    for i in map_range(0 as size_t, np) {
        let node = allocate_particle_node();
        push_node(node, P);
    }
    init_addresses(P);
    P_data_ = get_data_struct_from_particle_system(P);
}

extern
fn pe_reinitialize_particle_system(np: size_t) -> () {
    let P = get_particle_system_from_data_struct(P_data_);
    let np_old = P.np();
    if(np_old != np) {
        let constants = P.constants();
        let data_cells = P.data_cells();
        let ghost_layer = P.ghost_layer();
        let l = P.l();
        let nc = P.nc();
        deallocate(P.data_addresses());
        let data_addresses = allocate(np * sizeof[&u8]() as size_t);
        let P_new = get_particle_system(np, nc, ghost_layer, l, data_cells, constants, data_addresses);
        if(np_old > np) {
            let mut end = 1 as size_t;
            for d in @map_range(0 as size_t, dimension()) {
                end *= nc(d);
            }
            let mut j = np_old as size_t;
            let mut c = 0 as size_t;
            while (j > np as size_t && c < end) {
                let head = P_new.head(c);
                let node = remove(head);
                if(node != 0 as &mut ParticleList) {
                    deallocate_particle_node(node);
                    --j;
                }
                else {
                    ++c;
                }
            }
        }
        else {        
            for j in map_range(np_old, np) {
                let node = allocate_particle_node();
                push_node(node, P_new);
            }
        }
        init_addresses(P_new);
        P_data_ = get_data_struct_from_particle_system(P_new);        
    }
}
extern 
fn pe_get_number_of_particles() -> size_t {
    let P = get_particle_system_from_data_struct(P_data_);
    P.np()
}
extern
fn pe_distribute_particles() -> () {
    let P = get_particle_system_from_data_struct(P_data_);
    move_particles(P);
}
extern
fn pe_force_calculation() -> () {
    let P = get_particle_system_from_data_struct(P_data_);
    compute_force(P, force, 1);
}

// TODO Segfault here
/*extern
fn pe_get_number_of_ghost_particles() -> size_t {
    let P = get_particle_system_from_data_struct(P_data_);
    count_ghost_particles(P)
}*/

extern
fn pe_position_integration(dt: real, np_local: size_t, np_shadow: size_t) -> () {
    let P = get_particle_system_from_data_struct(P_data_);
    let addresses = P.addresses();
    for i in $map_range(@null(), np_local) @{
        let pl = addresses.get(i);
        pl.index = i;
        let p = get_particle_from_node(pl, true);
        integrate_x(p, dt);
    }
    for i in $map_range(np_local, np_local + np_shadow) @{
        let pl = addresses.get(i);
        pl.index = i - np_local;
        let p = get_particle_from_node(pl, false);
        integrate_x(p, dt);
    }
}

extern
fn pe_velocity_integration(dt: real) -> () {
    let P = get_particle_system_from_data_struct(P_data_);
    update(P, P.start(), P.end(), dt, 1, integrate_v);
}


extern
fn pe_deallocate_particle_system() -> () {
    let P = get_particle_system_from_data_struct(P_data_);
    deallocate_particle_system(P);
}
