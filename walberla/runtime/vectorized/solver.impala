extern 
fn c_compute_initial_forces() -> () {
    for node in map_block_list(head_) {
        impala_set_storage(node.storage);
        let P = get_particle_system_from_data_struct(node.block);
        let vector = get_particle_vector(node.vec_buf, P.nc());
        move_particles(P, vector);
        init_particle_vector(vector, P, true);
        compute_force(P, vector, force);
    }
}

extern
fn c_time_step_first_part(dt: real) -> () {
    for node in map_block_list(head_) {
        impala_set_storage(node.storage);
        let P = get_particle_system_from_data_struct(node.block);
        let vector = get_particle_vector(node.vec_buf, P.nc());
        integrate(vector, P.start(), P.end(), dt, integrate_x);
        //integrate(vector, [SIZE_T_0,..3], P.nc(), dt, integrate_x);
        write_back_particle_vector(vector, P.start(), P.end(), P);
        //write_back_particle_vector(vector, [SIZE_T_0,..3], P.nc(), P);
    }
}

extern
fn c_time_step_second_part(dt: real) -> () {
    for node in map_block_list(head_) {
        impala_set_storage(node.storage);
        let P = get_particle_system_from_data_struct(node.block);
        let vector = get_particle_vector(node.vec_buf, P.nc());
        move_particles(P, vector);
        init_particle_vector(vector, P, true);
        compute_force(P, vector, force);
        integrate(vector, P.start(), P.end(), dt, integrate_v);
        //integrate(vector, [SIZE_T_0,..3], P.nc(), dt, integrate_v);
    }
}
