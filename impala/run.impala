static mut P_data_ : ParticleSystemData;
static mut array : [i32];
extern 
fn initialize_system(np: size_t, l: &[real]) -> () {
    let mut P = get_particle_system_from_data_struct(P_data_);
    let constants = init_constants();
    let v = get_vector([l(0), l(1), l(2)]);    
    P = init_particle_system(np, v, constants);
    let status = check_invariants(P);
    P_data_ = get_data_struct_from_particle_system(P);
}

extern
fn deallocate_system() -> () {
    let P = get_particle_system_from_data_struct(P_data_);
    deallocate_particle_system(P);
    P_data_ = get_data_struct_from_particle_system(P);
}

/*
extern 
fn time_integration(t_start: real, t_end: real, dt: real, numthreads: int, vtk: bool) -> ()
{
    for i in map_range(0 as size_t, numthreads as size_t) {
        array(0) = i as i32;
    }
    let P = get_particle_system_from_data_struct(P_data_);
    let mut t : real = t_start; 
    let mut count = 0 as size_t;
    let mut i = 0 as size_t;
    let mut str : [u8 * 32];
    if(vtk == true && count % (1 as size_t) == (0 as size_t)) {
        let lang = "impala";
        generate_filename(i, "impala", &mut str, 32 as size_t);
        fprint_particle_system(str, i, P);
        ++i;
    }
    compute_force(P, force, numthreads);
    //print_particle_system(P);
    while(t < t_end) {
        t += dt;        
        integrate(P, P.start(), P.end(), dt, numthreads, integrate_x);
        move_particles(P);
        compute_force(P, force, numthreads);
        integrate(P, P.start(), P.end(), dt, numthreads, integrate_v);
        if(vtk == true && count % (1 as size_t) == (0 as size_t)) {
            let lang = "impala";
            generate_filename(i, "impala", &mut str, 32 as size_t);
            fprint_particle_system(str, i, P);
            ++i;
        }
        let status = check_invariants(P);
        ++count;
    }
    P_data_ = get_data_struct_from_particle_system(P); 
}
*/
extern 
fn time_integration(t_start: real, t_end: real, dt: real, numthreads: int, vtk: bool) -> ()
{
    let P : ParticleSystem = get_particle_system_from_data_struct(P_data_);
    let mut pnc = 1 as size_t;
    for d in @map_range(SIZE_T_0, DIMENSION) {
        pnc *= P.nc()(d);
    }
    let vec_data = allocate((pnc * sizeof[Cell]() as size_t) as size_t);
   
    let mut t : real = t_start; 
    let mut count = 0 as size_t;
    let mut i = 0 as size_t;
    let mut str : [u8 * 32];
    if(vtk == true && count % (1 as size_t) == (0 as size_t)) {
        let lang = "impala";
        generate_filename(i, "impala", &mut str, 32 as size_t);
        fprint_particle_system(str, i, P);
        ++i;
    }
    let vector : ParticleVector = get_particle_vector(vec_data, P.nc());
    init_particle_vector(vector, P, false);
    compute_force_vector(P, vector, force_vector);

    while(t < t_end) {
        t += dt;        
        integrate_vector(vector, P.start(), P.end(), dt, integrate_x_vector);
        write_back_particle_vector(vector, P.start(), P.end(), P);
        move_particles(P);
        init_particle_vector(vector, P, true);
        compute_force_vector(P, vector, force_vector);
        integrate_vector(vector, P.start(), P.end(), dt, integrate_v_vector);
        if(vtk == true && count % (1 as size_t) == (0 as size_t)) {
            write_back_particle_vector(vector, P.start(), P.end(), P);
            let lang = "impala";
            generate_filename(i, "impala", &mut str, 32 as size_t);
            fprint_particle_system(str, i, P);
            ++i;
        }
        let status = check_invariants(P);
        ++count;
    }
    clean_up_particle_vector(vector);
    deallocate(vec_data);
    P_data_ = get_data_struct_from_particle_system(P); 
}



