extern
fn run_simulation(np: size_t, l: &[real], dt : real, t_end : real, vtk: bool) -> () {
    let mut constants : Constants;
    init_constants(&mut constants);
    let v = get_vector([l(0), l(1), l(2)]);    
    let P = init_particle_system(np, v, constants);
    time_integration(0.0, t_end, dt, P, vtk);
    deallocate_particle_system(P);
}
fn time_integration(t_start: real, t_end: real, dt: real, P: ParticleSystem, vtk: bool) -> ()
{
    let mut t : real = t_start; 
    let mut count = 0 as size_t;
    let mut i = 0 as size_t;

    let mut str : [u8 * 32];
    compute_force(P, force);
    //print_particle_system(P);
    while(t < t_end) {
        t += dt;
        
        if(vtk == true && count % (10 as size_t) == (0 as size_t)) {
            let lang = "impala";
            generate_filename(i, "impala", &mut str, 32 as size_t);
            fprint_particle_system(str, i, P);
            ++i;
        }
        
        update(P, P.start(), P.end(), dt, integrate_x);
        move_particles(P);
        compute_force(P, force);
        update(P, P.start(), P.end(), dt, integrate_v);
        //print_statistics(P, t); 
        ++count;
    }
}
