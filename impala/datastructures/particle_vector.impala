struct InteractionVector {
    positions: &[i8], 
    forces: &[i8],
    nodes: &[i8],
    writeBack: &[i8]
}

fn allocate_interaction_vector(capacity: size_t) -> InteractionVector {
    InteractionVector {
        positions: allocate(capacity * sizeof[[real * 4]]() as size_t), 
        forces: allocate(capacity * sizeof[[real * 4]]() as size_t),
        nodes: allocate(capacity * sizeof[&mut ParticleList]() as size_t),
        writeBack: allocate(capacity * sizeof[bool]() as size_t),
    }
}

fn deallocate_interaction_vector(vector: InteractionVector) -> () {
    deallocate(vector.positions);
    deallocate(vector.forces);
    deallocate(vector.nodes);
    deallocate(vector.writeBack);
}

fn get_array_of_real_vector(data: &[i8]) -> &mut[[real * 4]] {
    bitcast[&mut[[real * 4]]](data) 
}

fn get_array_of_bools(data: &[i8]) -> &mut[bool] {
    bitcast[&mut[bool]](data) 
}

fn get_array_of_nodes(data: &[i8]) -> &mut[&mut ParticleList] {
    bitcast[&mut[&mut ParticleList]](data) 
}

fn get_array_of_indices(data: &[i8]) -> &mut[size_t] {
    bitcast[&mut[size_t]](data) 
}


