struct ArrayOfAddresses {
    size: fn() -> size_t,
    get: fn(size_t) -> &mut ParticleList,
    set: fn(size_t, &mut ParticleList) -> () 
}

fn get_array_of_addresses(size: size_t, data: &[i8]) -> ArrayOfAddresses {
    ArrayOfAddresses {
        size: || {size},
        get: |i| {bitcast[&[&mut ParticleList]](data)(i)},
        set: |i, ptr| {
            bitcast[&mut[&mut ParticleList]](data)(i) = ptr;
        }
    }
}

fn init_addresses(P: ParticleSystem) -> () {
    let z = 0 as size_t;
    let mut ic_start : [size_t * 3];
    for d in @map_range(0 as size_t, DIMENSION) {
        ic_start(d) = z;
    }
    let ic_end = P.nc();
    let mut pos = 0 as size_t;
    let addresses = P.addresses();
    for ic, pl in map_particle_system(ic_start, ic_end, P) {
        if(pl != 0 as &mut ParticleList) {
            addresses.set(pos++, pl);
        }
    }
}

