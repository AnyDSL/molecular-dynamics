extern "C"
{
    fn impala_LocalBody_get_velocity(index: size_t, V: &mut [f64 * 3]) -> (); 
    fn impala_LocalBody_get_position(index: size_t, X: &mut [f64 * 3]) -> (); 
    fn impala_LocalBody_get_force(index: size_t, F: &mut [f64 * 3]) -> (); 
    fn impala_LocalBody_get_mass(index: size_t) -> f64;
    fn impala_LocalBody_set_velocity(index: size_t, V: &[f64 * 3]) -> (); 
    fn impala_LocalBody_set_position(index: size_t, X: &[f64 * 3]) -> (); 
    fn impala_LocalBody_set_force(index: size_t, F: &[f64 * 3]) -> (); 
    fn impala_LocalBody_set_mass(index: size_t, m: f64) -> ();

    fn impala_ShadowBody_get_velocity(index: size_t, V: &mut [f64 * 3]) -> (); 
    fn impala_ShadowBody_get_position(index: size_t, X: &mut [f64 * 3]) -> (); 
    fn impala_ShadowBody_get_force(index: size_t, F: &mut [f64 * 3]) -> (); 
    fn impala_ShadowBody_get_mass(index: size_t) -> f64;
    fn impala_ShadowBody_set_velocity(index: size_t, V: &[f64 * 3]) -> (); 
    fn impala_ShadowBody_set_position(index: size_t, X: &[f64 * 3]) -> (); 
    fn impala_ShadowBody_set_force(index: size_t, F: &[f64 * 3]) -> (); 
    fn impala_ShadowBody_set_mass(index: size_t, m: f64) -> ();
}

fn size_of_particle() -> size_t {DIMENSION * (sizeof[real]() as size_t) + sizeof[size_t]() as size_t + sizeof[bool]() as size_t} 

fn get_local_particle(index: size_t, forces_old: &mut [real * 3]) -> Particle {
    Particle {
        getMass: @|| {impala_LocalBody_get_mass(index)},
        getCoordinates: @|| {
            let mut X : [real * 3];
            impala_LocalBody_get_position(index, &mut X);
            get_vector(X)
        },
        getVelocities: @|| {
            let mut V : [real * 3];
            impala_LocalBody_get_velocity(index, &mut V);
            get_vector(V)
        },
        getForces: @|| {
            let mut F : [real * 3];
            impala_LocalBody_get_force(index, &mut F);
            get_vector(F)
        },
        getForces_old: @|| {
            get_vector(*forces_old)
        },
        getIndex: @|| {
            index
        },
        setMass: @|m| {
            impala_LocalBody_set_mass(index, m);    
        }, 
        setCoordinates: @|coordinates| {
            let X = coordinates.get();
            impala_LocalBody_set_position(index, &X);    
        },
        setVelocities: @|velocities| {
            let V = velocities.get();
            impala_LocalBody_set_velocity(index, &V);    
        },
        setForces: @|forces| {
            let F = forces.get();
            impala_LocalBody_set_force(index, &F);    
        },
        setForces_old: @|forces| {
            let F = forces.get();
            for d in map_range(SIZE_T_0, DIMENSION) {
                forces_old(d) = F(d); 
            }
        }
    }
}

fn get_shadow_particle(index: size_t, forces_old: &mut [real * 3]) -> Particle {
    Particle {
        getMass: @|| {impala_ShadowBody_get_mass(index)},
        getCoordinates: @|| {
            let mut X : [real * 3];
            impala_ShadowBody_get_position(index, &mut X);
            get_vector(X)
        },
        getVelocities: @|| {
            let mut V : [real * 3];
            impala_ShadowBody_get_velocity(index, &mut V);
            get_vector(V)
        },
        getForces: @|| {
            let mut F : [real * 3];
            impala_ShadowBody_get_force(index, &mut F);
            get_vector(F)
        },
        getForces_old: @|| {
            get_vector(*forces_old)
        },
        getIndex: @|| {
            index
        },
        setMass: @|m| {
            impala_ShadowBody_set_mass(index, m);    
        }, 
        setCoordinates: @|coordinates| {
            let X = coordinates.get();
            impala_ShadowBody_set_position(index, &X);    
        },
        setVelocities: @|velocities| {
            let V = velocities.get();
            impala_ShadowBody_set_velocity(index, &V);    
        },
        setForces: @|forces| {
            let F = forces.get();
            impala_ShadowBody_set_force(index, &F);    
        },
        setForces_old: @|forces| {
            let F = forces.get();
            for d in map_range(SIZE_T_0, DIMENSION) {
                forces_old(d) = F(d); 
            }
        }
    }
}

struct ParticleList {
    index: size_t,
    isLocal: bool,
    force_old: [real * 3],
    next: &mut ParticleList
}

fn @allocate_particle_node() -> &mut ParticleList {
    let ptr = allocate(sizeof[ParticleList]() as size_t) as &mut ParticleList;
    (*ptr).next = 0 as &mut ParticleList; 
    ptr
}

fn @deallocate_particle_node(ptr: &mut ParticleList) -> () {
    deallocate(ptr as &[i8]);
}


fn @get_particle_from_node(pl: &mut ParticleList) -> Particle {
    if(pl.isLocal) {
        get_local_particle(pl.index, &mut pl.force_old)
    }
    else {
        get_shadow_particle(pl.index, &mut pl.force_old)
    }
}
