extern "C"
{
    fn size_t_to_string(size_t, &mut[u8], size_t) -> ();
    fn generate_filename(size_t , &[u8], &mut[u8], size_t) -> ();
    fn open_file(&[u8]) -> u64;
    fn close_file(u64) -> ();
    fn fprint_string(u64, &[u8]) -> ();
    fn fprint_line(u64, &[u8]) -> ();
    fn fprint_f64(u64, f64) -> ();
    fn fprint_f32(u64, f32) -> ();
    fn fprint_i32(u64, i32) -> ();
    fn fprint_size_t(u64, size_t) -> ();
    fn fprint_u8(u64, u8) -> ();
    fn allocate(size_t) -> &[i8];
    fn allocate_and_initialize(size_t, i32) -> &[i8];
    fn initialize(&[i8], size_t, i32) -> ();
    fn deallocate(&[i8]) -> ();
    fn c_random_seed(i64) -> ();
    fn c_random() -> f64;
}
type size_t = u64;
type uintptr_t = u64;
type real = f64;
static SIZE_T_0 = 0 as size_t;
static SIZE_T_1 = 1 as size_t;
static SIZE_T_2 = 2 as size_t;
static SIZE_T_3 = 3 as size_t;
static SIZE_T_4 = 4 as size_t;
static SIZE_T_32 = 32 as size_t;
static DIMENSION = 3 as size_t;
static EPSILON = 1e-9;

fn map_range(lower: size_t, upper: size_t, body: fn(size_t) -> ()) -> () {
   for i in range(lower as i32, upper as i32) {
        body(i as size_t);
   }
}

fn parallel_map_range(lower: size_t, upper: size_t, numthreads: int, body: fn(size_t) -> ()) -> () {
    for i in parallel(numthreads, lower as i32, upper as i32) {
        body(i as size_t);
    }
}

fn index(ic: [size_t * 3], nc: [size_t * 3]) -> size_t {
    fn @rec(i: size_t) -> size_t {
        if(i == DIMENSION - SIZE_T_1) {ic(i)}
        else {ic(i) + nc(i) * rec(i + SIZE_T_1)} 
    }
    rec(SIZE_T_0)
    //ic(0) + nc(0)*(ic(1) + nc(1)*ic(2))
}

struct Vector
{
    get: fn() -> [real * 3],
    combine: fn(fn(real, real) -> real, Vector) -> Vector,
    map: fn(fn(real) -> real) -> Vector,
    reduce: fn(fn(real, real) -> real, real) -> real,
    print: fn() -> (),
    fprint: fn(u64) -> ()
}



fn get_vector(data: [real * 3]) -> Vector
{
    Vector { 
        get: @|| {data},
        combine: @|f: fn(real, real) -> real, v: Vector| {
            let mut res : [real * 3];
            let v_data = v.get();
            for d in map_range((SIZE_T_0), DIMENSION) {
                res(d) = f(data(d), v_data(d)); 
            }
            get_vector(res)
        },
        map: @|f: fn(real) -> real| {
            let mut res : [real * 3];
            for d in map_range(SIZE_T_0, DIMENSION) {
                res(d) = f(data(d)); 
            }
            get_vector(res)
        },
        reduce: @|f: fn(real, real) -> real, empty: real| {
            let mut acc = empty;
            for d in map_range(SIZE_T_0, DIMENSION) {
                acc = f(acc, data(d)); 
            }
            acc
        },
        print: @|| { 
            for d in map_range(SIZE_T_0, DIMENSION-(SIZE_T_1)) {
                 print_f64(data(d));
                 print_char(' ');
            }
            print_f64(data(DIMENSION-(SIZE_T_1)));
        },
        fprint: @|fp| { 
            for d in map_range(SIZE_T_0, DIMENSION-(SIZE_T_1)) {
                 fprint_f64(fp, data(d));
                 fprint_u8(fp, ' ');
            }
            fprint_f64(fp, data(DIMENSION-(SIZE_T_1)));
        }

    }
}

fn @get_null_vector() -> Vector {get_vector([0 as real,..3])};

fn @add_vectors(a: Vector, b: Vector) -> Vector {
    a.combine(|x,y|{x+y}, b)
}

fn @sub_vectors(a: Vector, b: Vector) -> Vector {
    a.combine(|x,y|{x-y}, b)
}

fn @div_vectors(a: Vector, b: Vector) -> Vector {
    a.combine(|x,y|{x/y}, b)
}

fn @scale_vector(alpha: real, v: Vector) -> Vector {
    v.map(|x|{alpha*x})
}

fn @increase_vector(v: Vector, alpha: real) -> Vector {
    v.map(|x|{x + alpha})
}

fn @square_vector(v: Vector) -> Vector {
    v.map(|x|{x*x})
}

fn @vector_sum(v : Vector) -> real {
    v.reduce(|x,y|{x+y}, 0 as real)
}

struct Particle {
    getMass: fn() -> real,
    getCoordinates: fn() -> Vector,
    getVelocities: fn() -> Vector,
    getForces: fn() -> Vector,
    getForces_old: fn() -> Vector,
    getIndex: fn() -> size_t,
    setMass: fn(real) -> (),
    setCoordinates: fn(Vector) -> (),
    setVelocities: fn(Vector) -> (),
    setForces: fn(Vector) -> (),
    setForces_old: fn(Vector) -> ()
}

fn print_particle(p: Particle) -> () {
    print_string("Particle\n");
    print_string("Mass: ");
    print_f64(p.getMass() as double);
    print_string("\nCoordinates: ");
    p.getCoordinates().print();
    print_string("\nVelocities: ");
    p.getVelocities().print();
    print_string("\nForces: ");
    p.getForces().print();
    print_string("\nForces_old: ");
    p.getForces_old().print();
    print_char('\n');
}




