fn init_constants(constants: &mut Constants) -> () {
    constants.r_cut = INF;
}
    
fn init_particle_system(P: ParticleSystem) -> () {
    if(P.np() != 4 as size_t) {
        print_string("The number of particles must be 4\n");
    }
    else {
        let mut p : Particle;
        let sun = create_particle_cell();
        let earth = create_particle_cell();
        let jupiter = create_particle_cell();
        let halley = create_particle_cell();
        let root = P.head(0 as size_t);

        let origin = get_vector([1000.0, 1000.0, 1000.0]);
        p = get_particle_from_cell(*sun);
        p.setMass(1.0);
        p.setCoordinates(add_vectors(origin, get_vector([0.0, 0.0, 0.0])));
        p.setVelocities(get_vector([0.0, 0.0, 0.0]));
        insert(root, sun);

        p = get_particle_from_cell(*earth);
        p.setMass(3e-6);
        p.setCoordinates(add_vectors(origin, get_vector([0.0, 1.0, 0.0])));
        p.setVelocities(get_vector([-1.0, 0.0, 0.0]));
        insert(root, earth);

        p = get_particle_from_cell(*jupiter);
        p.setMass(9.55e-4);
        p.setCoordinates(add_vectors(origin, get_vector([0.0, 5.36, 0.0])));
        p.setVelocities(get_vector([-0.425, 0.0, 0.0]));
        insert(root, jupiter);

        p = get_particle_from_cell(*halley);
        p.setMass(1e-14);
        p.setCoordinates(add_vectors(origin, get_vector([34.75, 0.0, 0.0])));
        p.setVelocities(get_vector([0.0, 0.0296, 0.0]));
        insert(root, halley);

    }
}

