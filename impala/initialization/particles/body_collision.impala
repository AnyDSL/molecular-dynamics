static V_MAX : real = 10.0;

fn init_particle_system(np: size_t, domain: Vector, constants: Constants) -> ParticleSystem {
    let mut limit1 : [size_t * 3];
    let mut limit2 : [size_t * 3];
    let N = math.floor(math.pow(np as real / 11.0, 1.0/3.0)) as size_t;
    for d in @map_range(0 as size_t, DIMENSION) {
        limit1(d) = N;
        limit2(d) = N;
    }
    limit1(0) = limit1(0) * 10 as size_t;
    let mut np1 = 1 as size_t;
    let mut np2 = 1 as size_t;
    for d in @map_range(0 as size_t, DIMENSION) {
        np1 *= limit1(d);
        np2 *= limit2(d);
    }
    let ghost_layer = 1 as size_t;

    let P = allocate_particle_system(np1 + np2, ghost_layer, domain, get_null_vector(), constants);
    let factor = math.pow(2.0, 1.0/6.0)*P.constants().sigma();
    let mut p : Particle;
    let mut base : [real * 3];
    //base(0) = 50.0;
    base(0) = (domain.get()(0)/2 as real) - (limit1(0) as real * factor / 2 as real);
    base(1) = 100.0;
    base(2) = 100.0;
    let mut ip : [size_t * 3];
    for d in @map_range(0 as size_t, DIMENSION) {
        ip(d) = 0 as size_t;
    }
    let mut pos = 0 as size_t;
    while(ip(0) < limit1(0)) {
        while(ip(1) < limit1(1)) {
            while(ip(2) < limit1(2)) {
                let node = allocate_particle_node();
                p = get_particle_from_node(node);
                p.setMass(1.0);
                p.setVelocities(get_null_vector());
                let mut X : [real * 3];
                for d in @map_range(0 as size_t, DIMENSION) {
                    X(d) = base(d) + ip(d) as real * factor;
                }
                p.setCoordinates(get_vector(X));
                insert_particle(node, pos, P); 
                ++pos;
                ++ip(2);
            }
            ++ip(1);
            ip(2) = 0 as size_t;
        }
        ++ip(0);
        ip(1) = 0 as size_t;
    }

    base(0) = (domain.get()(0) - limit2(0) as real * factor) / 2 as real;
    base(1) = 115.0;
    base(2) = 100.0;

    for d in @map_range(0 as size_t, DIMENSION) {
        ip(d) = 0 as size_t;
    }
    while(ip(0) < limit2(0)) {
        while(ip(1) < limit2(1)) {
            while(ip(2) < limit2(2)) {
                let node = allocate_particle_node();
                p = get_particle_from_node(node);
                p.setMass(1.0);
                p.setVelocities(get_vector([0.0, -V_MAX, 0.0]));
                let mut X : [real * 3];

                for d in @map_range(0 as size_t, DIMENSION) {
                    X(d) = base(d) + ip(d) as real * factor;
                }
                p.setCoordinates(get_vector(X));
                insert_particle(node, pos, P); 
                ++pos;
                ++ip(2);
            }
            ++ip(1);
            ip(2) = 0 as size_t;
        }
        ++ip(0);
        ip(1) = 0 as size_t;
    }

    init_addresses(P);
    P
}

