static V_MAX : real = 10.0;

fn init_particle_system(np: size_t, l: Vector, constants: Constants) -> ParticleSystem {
    c_random_seed(0 as i64);
    let ghost_layer = 1 as size_t;
    let P = allocate_particle_system(np, ghost_layer, l, constants);
    
    let mut i = 0 as size_t;
    while(i < np) {
        let node = allocate_particle_node();
        let p = get_particle_from_node(node);
        p.setMass(1.0);
        let mut X : [real * 3];
        let mut V : [real * 3];
        let tmp = 2.0*V_MAX*c_random() as real - V_MAX;

        let mut norm = 0.0;
        for d in map_range(0 as size_t, @dimension()) @{
            X(d) = l.get()(d) * c_random() as real;
            V(d) = 2.0 * c_random() - 1.0;
            norm += V(d)*V(d);
        }
        norm = math.sqrt(norm);
        for d in map_range(0 as size_t, @dimension()) {
            V(d) = V(d) / norm * tmp; 
        }
        p.setCoordinates(get_vector(X));
        p.setVelocities(get_vector(V));
        let pos = i;
        insert_particle(node, pos, P); 
        ++i;
    }
    init_addresses(P);
    P
}
