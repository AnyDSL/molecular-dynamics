struct Constants {
    r_cut: fn() -> real,
    sigma: fn() -> real,
    epsilon: fn() -> real,
    r_cut_inv: fn() -> real,
    r_cut_sqr: fn() -> real,
    tmp1: fn() -> real,
    tmp2: fn() -> real
}

struct ConstantsData {
    r_cut: real,
    sigma: real,
    epsilon: real
}

fn get_constants(r_cut: real, sigma: real, epsilon: real) -> Constants  {
    Constants {
        r_cut: || {r_cut},
        sigma: || {sigma},
        epsilon: || {epsilon},
        r_cut_sqr: || {r_cut*r_cut},
        r_cut_inv: || {1.0/r_cut},
        tmp1: || {
            let sigma3 = sigma * sigma * sigma;
            let sigma6 = sigma3 * sigma3;
            24.0 * epsilon * sigma6
        },
        tmp2: || {
            let sigma3 = sigma * sigma * sigma;
            let sigma6 = sigma3 * sigma3;
            2.0 * sigma6
        }

    }
}


fn get_constants_from_data(constants_data: ConstantsData) -> Constants  {
    get_constants(constants_data.r_cut, constants_data.sigma, constants_data.epsilon)
}
fn get_data_from_constants(constants: Constants) -> ConstantsData  {
    ConstantsData {
        r_cut: constants.r_cut(),
        sigma: constants.sigma(),
        epsilon: constants.epsilon()
    }
}

fn force(p1: Particle, p2: Particle, write1: bool, write2: bool, constants: Constants) -> () {
    let sqr = |x : real| {x*x};
    let Dist = sub_vectors(p2.getCoordinates(), p1.getCoordinates()); 
    let Dist_sqr = square_vector(Dist);
    let r = Dist_sqr.reduce(|x,y|{x+y}, 0.0);
    if(r < @constants.r_cut_sqr()) {
        @count_force_evaluation();
        let r_8_inv = 1.0/sqr(sqr(r));
        let f = @constants.tmp1() * r_8_inv * (1.0 - r * r_8_inv * @constants.tmp2());
        let F = scale_vector(f, Dist);
        if(write1) {
            p1.setForces(add_vectors(p1.getForces(), F));
        }
        if(write2) {
            p2.setForces(sub_vectors(p2.getForces(), F));
        }
    }
}
