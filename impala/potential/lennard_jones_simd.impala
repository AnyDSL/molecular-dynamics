struct Constants {
    r_cut: fn() -> real,
    sigma: fn() -> real,
    epsilon: fn() -> real,
    r_cut_inv: fn() -> real,
    r_cut_sqr: fn() -> real,
    tmp1: fn() -> real,
    tmp2: fn() -> real
}

struct ConstantsData {
    r_cut: real,
    sigma: real,
    epsilon: real
}

fn get_constants(r_cut: real, sigma: real, epsilon: real) -> Constants  {
    Constants {
        r_cut: || {r_cut},
        sigma: || {sigma},
        epsilon: || {epsilon},
        r_cut_sqr: || {r_cut*r_cut},
        r_cut_inv: || {1.0/r_cut},
        tmp1: || {
            let sigma3 = sigma * sigma * sigma;
            let sigma6 = sigma3 * sigma3;
            24.0 * epsilon * sigma6
        },
        tmp2: || {
            let sigma3 = sigma * sigma * sigma;
            let sigma6 = sigma3 * sigma3;
            2.0 * sigma6
        }

    }
}


fn get_constants_from_data(constants_data: ConstantsData) -> Constants  {
    get_constants(constants_data.r_cut, constants_data.sigma, constants_data.epsilon)
}
fn get_data_from_constants(constants: Constants) -> ConstantsData  {
    ConstantsData {
        r_cut: constants.r_cut(),
        sigma: constants.sigma(),
        epsilon: constants.epsilon()
    }
}

fn force(particle_vector: ParticleVector, constants: Constants, N: size_t) -> () {
    let radii      = get_array_of_real_vector(particle_vector.radii);
    let forces      = get_array_of_real_vector(particle_vector.forces);
    let force_sum   = get_array_of_real_vector(particle_vector.force_sum);
    let tmp   = get_array_of_real_vector(particle_vector.tmp);
    let sqr = |x : real| {x*x};

    for i in vectorize(VECTOR_LENGTH as i32, 4, 0, (N * VECTOR_LENGTH) as i32) @{
        let r_8_inv = 1.0/sqr(sqr(radii(i)));
        let f = @constants.tmp1() * r_8_inv * (1.0 - radii(i) * r_8_inv * @constants.tmp2());
        forces(i) = f * tmp(i);
        force_sum(i % VECTOR_LENGTH as i32) += forces(i);
    }
}
