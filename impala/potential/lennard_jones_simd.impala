struct Constants {
    r_cut: fn() -> real,
    sigma: fn() -> real,
    epsilon: fn() -> real,
    r_cut_inv: fn() -> real,
    r_cut_sqr: fn() -> real,
    tmp1: fn() -> real,
    tmp2: fn() -> real
}

struct ConstantsData {
    r_cut: real,
    sigma: real,
    epsilon: real
}

fn get_constants(r_cut: real, sigma: real, epsilon: real) -> Constants  {
    Constants {
        r_cut: || {r_cut},
        sigma: || {sigma},
        epsilon: || {epsilon},
        r_cut_sqr: || {r_cut*r_cut},
        r_cut_inv: || {1.0/r_cut},
        tmp1: || {
            let sigma3 = sigma * sigma * sigma;
            let sigma6 = sigma3 * sigma3;
            24.0 * epsilon * sigma6
        },
        tmp2: || {
            let sigma3 = sigma * sigma * sigma;
            let sigma6 = sigma3 * sigma3;
            2.0 * sigma6
        }

    }
}


fn get_constants_from_data(constants_data: ConstantsData) -> Constants  {
    get_constants(constants_data.r_cut, constants_data.sigma, constants_data.epsilon)
}
fn get_data_from_constants(constants: Constants) -> ConstantsData  {
    ConstantsData {
        r_cut: constants.r_cut(),
        sigma: constants.sigma(),
        epsilon: constants.epsilon()
    }
}

fn force(interaction_vector: InteractionVector, constants: Constants, N: size_t) -> () {
    let positions1  = get_array_of_real_vector(interaction_vector.positions1);
    let forces      = get_array_of_real_vector(interaction_vector.forces);
    let force_sum   = get_array_of_real_vector(interaction_vector.force_sum);
    let positions2  = get_array_of_real_vector(interaction_vector.positions2);
    let distances   = get_array_of_real_vector(interaction_vector.distances);
    let radii       = get_array_of_real_vector(interaction_vector.radii);
    let sqr = |x : real| {x*x};
    let vector_length = VECTOR_LENGTH as i32;
    for i in vectorize(vector_length, 4, 0, N as i32 * vector_length) @{
    //for i in @map_range(@null(), N * VECTOR_LENGTH) @{
        distances(i) = positions2(i) - positions1(i % vector_length);
    }

    for i in vectorize(vector_length, 4, 0, N as i32) @{
    //for i in @map_range(@null(), N) @{
        let mut r = 0.0;
        for d in @map_range(@null(), VECTOR_LENGTH) {
            r += sqr(distances(i as size_t * VECTOR_LENGTH + d));
        }
        for d in @map_range(@null(), VECTOR_LENGTH) {
            radii(i as size_t * VECTOR_LENGTH + d) = r;
        }
    }

    //for i in @map_range(@null(), N * VECTOR_LENGTH) @{
    for i in vectorize(vector_length, 4, 0, N as i32 * vector_length) @{
        if(radii(i) < @constants.r_cut_sqr()) {
            let r_8_inv = 1.0/sqr(sqr(radii(i)));
            let f = @constants.tmp1() * r_8_inv * (1.0 - radii(i) * r_8_inv * @constants.tmp2());
            forces(i) = f * distances(i);
            force_sum(i % vector_length) += forces(i);
        }
    }
}
