
fn compute_force(P: ParticleSystem, vector: ParticleVector, force: fn(Cell, Cell, size_t, Constants) -> ()) -> () {
    let mut ic_start : [size_t * 3];
    for d in @map_range(@null(), @dimension()) {
        ic_start(d) = @null();
    }
    let ic_end = P.nc();
    for ic, cell in $map_particle_vector(ic_start, ic_end, vector) @{
        let forces = get_array_of_real(cell.forces);
        for i in $map_range(@null(), cell.size * @dimension()) {
        //for i in vectorize(4, 4, 0, (cell.size * @dimension()) as i32) {
            forces(i) = 0.0;
        }
    }
    
    for ic, cell1 in $map_particle_vector(ic_start, ic_end, vector) @{
        let mut jc_start : [size_t * 3]; 
        let mut jc_end : [size_t * 3];
        for d in @map_range(@null(), @dimension()) {
            if(ic(d) >= P.start()(d)) {
                jc_start(d) = ic(d) - @one();
            } 
            else {
                jc_start(d) = ic(d) + @one();
            };
            if(ic(d) < P.end()(d)) { 
                jc_end(d) = ic(d) + @two(); 
            } 
            else {
                jc_end(d) = ic(d);
            };
        }
        for i in $map_range(@null(), cell1.size) @{
            for jc, cell2 in $map_particle_vector(jc_start, jc_end, vector) @{
                force(cell1, cell2, i, P.constants());
            }
        }
    }
}

